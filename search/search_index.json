{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Materials Project Workshop 2020 (July 28 - 30) \u00b6 The 2020 Materials Project Workshop will be fully virtual due to COVID related travel and congregation restrictions. We'll use a cloud-based Jupyter deployment to enable interactive tutorials where we provide close support. Registration \u00b6 Registration is currently waitlisted. Tentative Schedule \u00b6 Primer \u00b6 (optional) Tuesday Morning -- Python/Jupyter Primer \u00b6 09:00-09:20 Intro - Logistics 09:20-10:20 Basics - Variables, Lists, Loops 10:20-10:40 Break 10:40-11:40 Control: Conditions, Funtions, Sets/Dictionaries 11:40-12:00 Open Discussion 12:00-13:00 Lunch (optional) Tuesday Afternoon -- MongoDB using Python primer \u00b6 13:00-13:20 Data Modeling - Python Types to JSON to MongoDB 13:20-14:00 Listing, Counting, Finding, and Dot Notation 14:00-14:20 Break 14:20-15:20 Advanced Filtering, Basic Aggregation, and Indexing 15:20-15:40 Open Discussion 15:40-16:00 Wrap-Up Main Workshop \u00b6 Wednesday Morning \u00b6 09:00-09:20 Overview of the Materials Project 09:20-10:20 Using the Website Effectively 10:20-10:40 Break 10:40-11:40 Pymatgen Foundations 11:40-12:00 Open Discussion 12:00-13:00 Lunch Wednesday Afternoon \u00b6 13:00-14:00 Working with Surfaces in Pymatgen 14:00-14:20 Break 14:20-15:20 Using the Materials API 15:20-15:40 Open Discussion 15:40-16:00 Wrap-up Thursday Morning \u00b6 09:00-09:20 Intro 09:20-10:20 Running Other Codes 10:20-10:40 Break 10:40-11:40 Exploring New Systems with Pymatgen 11:40-12:00 Open Discussion 12:00-13:00 Lunch Thursday Afternoon \u00b6 13:00-14:00 MPContribs : Share You Data via MPContribs 14:00-14:20 Break 14:20-15:40 Machine Learning with Matminer 15:40-16:00 Wrap-Up Instructions: \u00b6 Sign in to your MP account online. Register for an account first if needed. More instructions are coming as the workshop tools are finalized. Format \u00b6 The lessons will be taught in 20-minute sessions as 10-minutes of \"lecture\" followed by 10-minutes of a hands-on exercise. You're welcome to follow along with the already filled in hand-out notebook or by typing in as we go along. Still have questions? \u00b6 If you have any further questions, you can find some more helpful info and confact information here","title":"Home"},{"location":"#materials-project-workshop-2020-july-28-30","text":"The 2020 Materials Project Workshop will be fully virtual due to COVID related travel and congregation restrictions. We'll use a cloud-based Jupyter deployment to enable interactive tutorials where we provide close support.","title":"Materials Project Workshop 2020 (July 28 - 30)"},{"location":"#registration","text":"Registration is currently waitlisted.","title":"Registration"},{"location":"#tentative-schedule","text":"","title":"Tentative Schedule"},{"location":"#primer","text":"","title":"Primer"},{"location":"#optional-tuesday-morning-pythonjupyter-primer","text":"09:00-09:20 Intro - Logistics 09:20-10:20 Basics - Variables, Lists, Loops 10:20-10:40 Break 10:40-11:40 Control: Conditions, Funtions, Sets/Dictionaries 11:40-12:00 Open Discussion 12:00-13:00 Lunch","title":"(optional) Tuesday Morning -- Python/Jupyter Primer"},{"location":"#optional-tuesday-afternoon-mongodb-using-python-primer","text":"13:00-13:20 Data Modeling - Python Types to JSON to MongoDB 13:20-14:00 Listing, Counting, Finding, and Dot Notation 14:00-14:20 Break 14:20-15:20 Advanced Filtering, Basic Aggregation, and Indexing 15:20-15:40 Open Discussion 15:40-16:00 Wrap-Up","title":"(optional) Tuesday Afternoon -- MongoDB using Python primer"},{"location":"#main-workshop","text":"","title":"Main Workshop"},{"location":"#wednesday-morning","text":"09:00-09:20 Overview of the Materials Project 09:20-10:20 Using the Website Effectively 10:20-10:40 Break 10:40-11:40 Pymatgen Foundations 11:40-12:00 Open Discussion 12:00-13:00 Lunch","title":"Wednesday Morning"},{"location":"#wednesday-afternoon","text":"13:00-14:00 Working with Surfaces in Pymatgen 14:00-14:20 Break 14:20-15:20 Using the Materials API 15:20-15:40 Open Discussion 15:40-16:00 Wrap-up","title":"Wednesday Afternoon"},{"location":"#thursday-morning","text":"09:00-09:20 Intro 09:20-10:20 Running Other Codes 10:20-10:40 Break 10:40-11:40 Exploring New Systems with Pymatgen 11:40-12:00 Open Discussion 12:00-13:00 Lunch","title":"Thursday Morning"},{"location":"#thursday-afternoon","text":"13:00-14:00 MPContribs : Share You Data via MPContribs 14:00-14:20 Break 14:20-15:40 Machine Learning with Matminer 15:40-16:00 Wrap-Up","title":"Thursday Afternoon"},{"location":"#instructions","text":"Sign in to your MP account online. Register for an account first if needed. More instructions are coming as the workshop tools are finalized.","title":"Instructions:"},{"location":"#format","text":"The lessons will be taught in 20-minute sessions as 10-minutes of \"lecture\" followed by 10-minutes of a hands-on exercise. You're welcome to follow along with the already filled in hand-out notebook or by typing in as we go along.","title":"Format"},{"location":"#still-have-questions","text":"If you have any further questions, you can find some more helpful info and confact information here","title":"Still have questions?"},{"location":"primer/01_basic_python/1%20-%20Introduction%20and%20Jupyter%20Use/","text":"(function() { function addWidgetsRenderer() { var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var scriptElement = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} scriptElement.src = widgetRendererSrc; document.body.appendChild(scriptElement); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Lesson 1: Introduction to Python and Using Jupyter notebooks \u00b6 The Jupyter notebook is a platform for using and writing code in a dynamic way that allows users to combine cells of code snippets that are executed with a persistent namespace and kernel alongside markdown text for facilitating readability and visualization. In this notebook, we cover some basics of Jupyter functionality along with a discussion of some details of how you can use python in this environment and elsewhere. Installation \u00b6 For this workshop, we've constructed an online environment for everyone to use in order to smooth out any platform-dependent installation issues, but you'll probably want to install the tools we use today locally on your own machine. To do this, we recommend Anaconda , which is an effective tool for python package management that can create virtual environments, comes with a pre-installed IDE, and includes all of the Jupyter functionality that you'll see here. The Anaconda installer should be detailed on the page linked above, but here's another resource for installation that might be helpful. Code vs. Markdown \u00b6 Jupyter notebooks are broken down into \"cells\" which might contain either code or markdown. If you select a cell with your mouse, it should be highlighted with a green border indicating that you are in \"edit,\" mode and can edit the contents of the cell. If text reading In [ ]: is on the left hand side of the cell, it's a \"code\" cell. For example, type the following and press \"Shift + Enter\" print ( \"Hello world!\" ) Pressing \"Shift + Enter\" executes the code in the cell, prints the output below the cell, and creates a new cell below that one. In addition to code cells, you can also write your own markdown cells by converting a cell using either the dropdown menu in the toolbar or pressing \"Esc + m\". In general, pressing escape enters \"command mode\" for which you can issue a number of commands, including f - find and replace m - convert to markdown y - convert to code h - open the help menu Right now, trying typing \"Esc + h\" to open the help/shortcut menu and peruse it. Spend a minute testing out some of the shortcuts. Note that markdown cells are quite flexible and can basically do anything wikipedia does, including adding $\\LaTeX$-formatted equations. $\\hat{H}\\psi = E \\psi$ Shell commands, magic, and where to learn more \u00b6 Jupyter notebooks can also issue commands to the shell, which can be achieved using the ! symbol at the beginning of the cell: ! ls . ! date In addition, certain things can be achieved in Jupyter notebooks using what are called \"magic\" commands, which are demarcated using the % sign. The most common of these are the magic function to enable inline plotting: % matplotlib inline and to invoke the debugger in a particular cell on an error: % pdb These functions set up special functionality in the notebook. Lastly, note that Jupyter notebooks are becoming increasingly popular as tools to supplement publication. As a computational researcher, you can provide explicit documentation of your methods with embedded code that actually works for a person who wants to understand better what you're working on. In my own work, I've begun making all my plots and collecting all of my data in Jupyter notebooks to provide as supporting info for each of my recent papers. It's a bit more work, but you'll find that having this level of organization and being this transparent about your methods goes a long way. There are great resources for IPython notebooks online, and here are a few of them: Jupyter website A gallery of interesting notebooks","title":"1   Introduction and Jupyter Use"},{"location":"primer/01_basic_python/1%20-%20Introduction%20and%20Jupyter%20Use/#lesson-1-introduction-to-python-and-using-jupyter-notebooks","text":"The Jupyter notebook is a platform for using and writing code in a dynamic way that allows users to combine cells of code snippets that are executed with a persistent namespace and kernel alongside markdown text for facilitating readability and visualization. In this notebook, we cover some basics of Jupyter functionality along with a discussion of some details of how you can use python in this environment and elsewhere.","title":"Lesson 1: Introduction to Python and Using Jupyter notebooks"},{"location":"primer/01_basic_python/1%20-%20Introduction%20and%20Jupyter%20Use/#installation","text":"For this workshop, we've constructed an online environment for everyone to use in order to smooth out any platform-dependent installation issues, but you'll probably want to install the tools we use today locally on your own machine. To do this, we recommend Anaconda , which is an effective tool for python package management that can create virtual environments, comes with a pre-installed IDE, and includes all of the Jupyter functionality that you'll see here. The Anaconda installer should be detailed on the page linked above, but here's another resource for installation that might be helpful.","title":"Installation"},{"location":"primer/01_basic_python/1%20-%20Introduction%20and%20Jupyter%20Use/#code-vs-markdown","text":"Jupyter notebooks are broken down into \"cells\" which might contain either code or markdown. If you select a cell with your mouse, it should be highlighted with a green border indicating that you are in \"edit,\" mode and can edit the contents of the cell. If text reading In [ ]: is on the left hand side of the cell, it's a \"code\" cell. For example, type the following and press \"Shift + Enter\" print ( \"Hello world!\" ) Pressing \"Shift + Enter\" executes the code in the cell, prints the output below the cell, and creates a new cell below that one. In addition to code cells, you can also write your own markdown cells by converting a cell using either the dropdown menu in the toolbar or pressing \"Esc + m\". In general, pressing escape enters \"command mode\" for which you can issue a number of commands, including f - find and replace m - convert to markdown y - convert to code h - open the help menu Right now, trying typing \"Esc + h\" to open the help/shortcut menu and peruse it. Spend a minute testing out some of the shortcuts. Note that markdown cells are quite flexible and can basically do anything wikipedia does, including adding $\\LaTeX$-formatted equations. $\\hat{H}\\psi = E \\psi$","title":"Code vs. Markdown"},{"location":"primer/01_basic_python/1%20-%20Introduction%20and%20Jupyter%20Use/#shell-commands-magic-and-where-to-learn-more","text":"Jupyter notebooks can also issue commands to the shell, which can be achieved using the ! symbol at the beginning of the cell: ! ls . ! date In addition, certain things can be achieved in Jupyter notebooks using what are called \"magic\" commands, which are demarcated using the % sign. The most common of these are the magic function to enable inline plotting: % matplotlib inline and to invoke the debugger in a particular cell on an error: % pdb These functions set up special functionality in the notebook. Lastly, note that Jupyter notebooks are becoming increasingly popular as tools to supplement publication. As a computational researcher, you can provide explicit documentation of your methods with embedded code that actually works for a person who wants to understand better what you're working on. In my own work, I've begun making all my plots and collecting all of my data in Jupyter notebooks to provide as supporting info for each of my recent papers. It's a bit more work, but you'll find that having this level of organization and being this transparent about your methods goes a long way. There are great resources for IPython notebooks online, and here are a few of them: Jupyter website A gallery of interesting notebooks","title":"Shell commands, magic, and where to learn more"}]}