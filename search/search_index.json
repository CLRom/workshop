{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Materials Project Workshop 2020 (July 28 - 30) \u00b6 The Materials Project Workshop is two-day interactive workshop to learn to use th Materials Project (MP) open-source tools. Topics will include basic structure manipulation, querying data from MP using the API, automating DFT calculations, exploring new chemical systems and machine learning. A optional one-day python and MongoDB primer is provided for anyone new to python programming and using databases. We'll also provide a virtual poster-session for anyone interested in networking with other participants. Registration \u00b6 Registration is currently closed. Location \u00b6 The 2020 Materials Project Workshop will be fully virtual due to COVID related travel and congregation restrictions. We'll use a cloud-based python environment to enable interactive tutorials where we provide close support. Primer (optional) \u00b6 All times are in Pacific Daylight Time. Tuesday Morning -- Python/Jupyter Primer \u00b6 09:00-09:20 Intro - Logistics 09:20-10:20 Basics - Variables, Lists, Loops 10:20-10:40 Break 10:40-11:40 Control: Conditions, Funtions, Sets/Dictionaries 11:40-12:00 Open Discussion 12:00-13:00 Lunch Tuesday Afternoon -- MongoDB using Python primer \u00b6 13:00-13:20 Data Modeling - Python Types to JSON to MongoDB 13:20-14:00 Listing, Counting, Finding, and Dot Notation 14:00-14:20 Break 14:20-15:20 Advanced Filtering, Basic Aggregation, and Indexing 15:20-15:40 Open Discussion 15:40-16:00 Wrap-Up Main Workshop \u00b6 All times are in Pacific Daylight Time. Wednesday Morning \u00b6 09:00-09:20 Overview of the Materials Project 09:20-10:20 Using the Website Effectively 10:20-10:40 Break 10:40-11:40 Pymatgen Foundations 11:40-12:00 Open Discussion 12:00-13:00 Lunch Wednesday Afternoon \u00b6 13:00-14:00 Working with Surfaces in Pymatgen 14:00-14:20 Break 14:20-15:20 Using the Materials API 15:20-15:40 Open Discussion 15:40-16:00 Wrap-up Thursday Morning \u00b6 09:00-09:20 Intro 09:20-10:20 Automating DFT 10:20-10:40 Break 10:40-11:40 Exploring New Systems with Pymatgen 11:40-12:00 Open Discussion 12:00-13:00 Lunch Thursday Afternoon \u00b6 13:00-14:00 MPContribs : Share You Data via MPContribs 14:00-14:20 Break 14:20-15:40 Machine Learning with Matminer 15:40-16:00 Wrap-Up Still have questions? \u00b6 If you have any further questions, you can find some more helpful info and confact information here","title":"Home"},{"location":"#materials-project-workshop-2020-july-28-30","text":"The Materials Project Workshop is two-day interactive workshop to learn to use th Materials Project (MP) open-source tools. Topics will include basic structure manipulation, querying data from MP using the API, automating DFT calculations, exploring new chemical systems and machine learning. A optional one-day python and MongoDB primer is provided for anyone new to python programming and using databases. We'll also provide a virtual poster-session for anyone interested in networking with other participants.","title":"Materials Project Workshop 2020 (July 28 - 30)"},{"location":"#registration","text":"Registration is currently closed.","title":"Registration"},{"location":"#location","text":"The 2020 Materials Project Workshop will be fully virtual due to COVID related travel and congregation restrictions. We'll use a cloud-based python environment to enable interactive tutorials where we provide close support.","title":"Location"},{"location":"#primer-optional","text":"All times are in Pacific Daylight Time.","title":"Primer (optional)"},{"location":"#tuesday-morning-pythonjupyter-primer","text":"09:00-09:20 Intro - Logistics 09:20-10:20 Basics - Variables, Lists, Loops 10:20-10:40 Break 10:40-11:40 Control: Conditions, Funtions, Sets/Dictionaries 11:40-12:00 Open Discussion 12:00-13:00 Lunch","title":"Tuesday Morning -- Python/Jupyter Primer"},{"location":"#tuesday-afternoon-mongodb-using-python-primer","text":"13:00-13:20 Data Modeling - Python Types to JSON to MongoDB 13:20-14:00 Listing, Counting, Finding, and Dot Notation 14:00-14:20 Break 14:20-15:20 Advanced Filtering, Basic Aggregation, and Indexing 15:20-15:40 Open Discussion 15:40-16:00 Wrap-Up","title":"Tuesday Afternoon -- MongoDB using Python primer"},{"location":"#main-workshop","text":"All times are in Pacific Daylight Time.","title":"Main Workshop"},{"location":"#wednesday-morning","text":"09:00-09:20 Overview of the Materials Project 09:20-10:20 Using the Website Effectively 10:20-10:40 Break 10:40-11:40 Pymatgen Foundations 11:40-12:00 Open Discussion 12:00-13:00 Lunch","title":"Wednesday Morning"},{"location":"#wednesday-afternoon","text":"13:00-14:00 Working with Surfaces in Pymatgen 14:00-14:20 Break 14:20-15:20 Using the Materials API 15:20-15:40 Open Discussion 15:40-16:00 Wrap-up","title":"Wednesday Afternoon"},{"location":"#thursday-morning","text":"09:00-09:20 Intro 09:20-10:20 Automating DFT 10:20-10:40 Break 10:40-11:40 Exploring New Systems with Pymatgen 11:40-12:00 Open Discussion 12:00-13:00 Lunch","title":"Thursday Morning"},{"location":"#thursday-afternoon","text":"13:00-14:00 MPContribs : Share You Data via MPContribs 14:00-14:20 Break 14:20-15:40 Machine Learning with Matminer 15:40-16:00 Wrap-Up","title":"Thursday Afternoon"},{"location":"#still-have-questions","text":"If you have any further questions, you can find some more helpful info and confact information here","title":"Still have questions?"},{"location":"logistics/logistics/","text":"Logistics \u00b6 Before the Workshop \u00b6 Virtual Poster-Session \u00b6 We'll host a virtual poster-session via a YouTube video for lightning summaries and a FigShare repository with associated DOI for citation. Please email : your poster PDF a 1-minute lighting video explaining the main concept behind your poster. This shouldn't be detailed summary of your work, but rather a high-level description that everyone can listen to and then decide which posters they want to focus on such as an elevator-pitch. We'll host the lightning-videos on our YouTube Channel and publish the PDFs on FigShare with a DOI that everyone can cite for this poster session. Setup Instructions: \u00b6 Sign in to your MP account online. Register for an account first if needed. Sign in to an account on CoCalc using the same email address you registered with. This will be the online python service we'll use to work interactively. Finding your API Key: \u00b6 An important aspect of the Materials Project API is the use of API keys to ensure we can control the amount of traffic that comes to the API. Otherwise, it's very easy for someone to take down the MP servers, making them unavailable for anyone. Your API key can be accessed via the Dashboard: Login to your Materials Project account and find the dashboard in the top right hand corner Your API is displayed in the middle under the Generate API Key button. Keep this to yourself. You can reset your API key at any time. Finding your MPContribs API Key: \u00b6 Currently the API key for MPContribs is separate from Materials Project. In order to get your MPContribs API key. Login to portal.mpcontribs.org Hover over the More drop-down in the top right hand corner Click the API Key button to copy your API key to your clipboard. You can now paste this into your notebook during the MPContribs lesson. During the Workshop \u00b6 Start of the Day Instructions \u00b6 Sign in to CoCalc Sign in to the Zoom Link Sign in to the MP Workshop slack Lesson Format \u00b6 The lessons will be taught in 20-minute sessions as 10-minutes of lesson followed by 10-minutes of a hands-on exercise. You're welcome to follow along with the already filled in hand-out notebook or by typing in to an empty notebook as we go along in the lesson. If you need help \u00b6 Click the chat icon at the top right corner your CoCalc browser window. Type in a message in the new chat window followed by Shift + Enter to send the message and our helpers will be notified. If you have a General Question \u00b6 Feel free to ask a question in the MP Workshop Slack #workshop2020 channel","title":"Logistics"},{"location":"logistics/logistics/#logistics","text":"","title":"Logistics"},{"location":"logistics/logistics/#before-the-workshop","text":"","title":"Before the Workshop"},{"location":"logistics/logistics/#virtual-poster-session","text":"We'll host a virtual poster-session via a YouTube video for lightning summaries and a FigShare repository with associated DOI for citation. Please email : your poster PDF a 1-minute lighting video explaining the main concept behind your poster. This shouldn't be detailed summary of your work, but rather a high-level description that everyone can listen to and then decide which posters they want to focus on such as an elevator-pitch. We'll host the lightning-videos on our YouTube Channel and publish the PDFs on FigShare with a DOI that everyone can cite for this poster session.","title":"Virtual Poster-Session"},{"location":"logistics/logistics/#setup-instructions","text":"Sign in to your MP account online. Register for an account first if needed. Sign in to an account on CoCalc using the same email address you registered with. This will be the online python service we'll use to work interactively.","title":"Setup Instructions:"},{"location":"logistics/logistics/#finding-your-api-key","text":"An important aspect of the Materials Project API is the use of API keys to ensure we can control the amount of traffic that comes to the API. Otherwise, it's very easy for someone to take down the MP servers, making them unavailable for anyone. Your API key can be accessed via the Dashboard: Login to your Materials Project account and find the dashboard in the top right hand corner Your API is displayed in the middle under the Generate API Key button. Keep this to yourself. You can reset your API key at any time.","title":"Finding your API Key:"},{"location":"logistics/logistics/#finding-your-mpcontribs-api-key","text":"Currently the API key for MPContribs is separate from Materials Project. In order to get your MPContribs API key. Login to portal.mpcontribs.org Hover over the More drop-down in the top right hand corner Click the API Key button to copy your API key to your clipboard. You can now paste this into your notebook during the MPContribs lesson.","title":"Finding your MPContribs API Key:"},{"location":"logistics/logistics/#during-the-workshop","text":"","title":"During the Workshop"},{"location":"logistics/logistics/#start-of-the-day-instructions","text":"Sign in to CoCalc Sign in to the Zoom Link Sign in to the MP Workshop slack","title":"Start of the Day Instructions"},{"location":"logistics/logistics/#lesson-format","text":"The lessons will be taught in 20-minute sessions as 10-minutes of lesson followed by 10-minutes of a hands-on exercise. You're welcome to follow along with the already filled in hand-out notebook or by typing in to an empty notebook as we go along in the lesson.","title":"Lesson Format"},{"location":"logistics/logistics/#if-you-need-help","text":"Click the chat icon at the top right corner your CoCalc browser window. Type in a message in the new chat window followed by Shift + Enter to send the message and our helpers will be notified.","title":"If you need help"},{"location":"logistics/logistics/#if-you-have-a-general-question","text":"Feel free to ask a question in the MP Workshop Slack #workshop2020 channel","title":"If you have a General Question"},{"location":"people/people/","text":"People \u00b6 The annual MP Workshop would not be possible without all the people that contribute. In particular, several critical people step up each year to plan, organize, develop lessons, run the workshop, teach, collect post-workshop surveys, and begin planning again. This page highlights those individuals who have contributed significantly to this workshop each year. 2020 \u00b6 2020 is particularly important as the transition from an in-person 40-person workshop to an online 100-person workshop represents a significant effort. The workshop lesson plan changes a little bit each year, but these individuals stepped up and reworked the lessons for a virtual teaching environment. This represents 100's, if not well over 1000+ combined hours of effort. Organizers \u00b6 Shyam Dwaraknath Matthew Horton Patrick Huck Alice Muller Kristin Persson Instructors \u00b6 Ryan Kingbury Guy Moore Jason Munro Sam Blau Evan Spotte-Smith Oxana Andriuc John Dagdelen Rachel Woods-Robinson Alex Ganose Helpers \u00b6 Mingjian Wen Jianli Cheng Ann Rutt Hetal Patel Kara Fong Matt McDermott Jimmy Shen Eric Sivonxay","title":"People"},{"location":"people/people/#people","text":"The annual MP Workshop would not be possible without all the people that contribute. In particular, several critical people step up each year to plan, organize, develop lessons, run the workshop, teach, collect post-workshop surveys, and begin planning again. This page highlights those individuals who have contributed significantly to this workshop each year.","title":"People"},{"location":"people/people/#2020","text":"2020 is particularly important as the transition from an in-person 40-person workshop to an online 100-person workshop represents a significant effort. The workshop lesson plan changes a little bit each year, but these individuals stepped up and reworked the lessons for a virtual teaching environment. This represents 100's, if not well over 1000+ combined hours of effort.","title":"2020"},{"location":"people/people/#organizers","text":"Shyam Dwaraknath Matthew Horton Patrick Huck Alice Muller Kristin Persson","title":"Organizers"},{"location":"people/people/#instructors","text":"Ryan Kingbury Guy Moore Jason Munro Sam Blau Evan Spotte-Smith Oxana Andriuc John Dagdelen Rachel Woods-Robinson Alex Ganose","title":"Instructors"},{"location":"people/people/#helpers","text":"Mingjian Wen Jianli Cheng Ann Rutt Hetal Patel Kara Fong Matt McDermott Jimmy Shen Eric Sivonxay","title":"Helpers"},{"location":"primer/01_basic_python/1%20-%20Introduction%20and%20Jupyter%20Use/","text":"(function() { function addWidgetsRenderer() { var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var scriptElement = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} scriptElement.src = widgetRendererSrc; document.body.appendChild(scriptElement); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Lesson 1: Introduction to Python and Using Jupyter notebooks \u00b6 The Jupyter notebook is a platform for using and writing code in a dynamic way that allows users to combine cells of code snippets that are executed with a persistent namespace and kernel alongside markdown text for facilitating readability and visualization. In this notebook, we cover some basics of Jupyter functionality along with a discussion of some details of how you can use python in this environment and elsewhere. Installation \u00b6 For this workshop, we've constructed an online environment for everyone to use in order to smooth out any platform-dependent installation issues, but you'll probably want to install the tools we use today locally on your own machine. To do this, we recommend Anaconda , which is an effective tool for python package management that can create virtual environments, comes with a pre-installed IDE, and includes all of the Jupyter functionality that you'll see here. The Anaconda installer should be detailed on the page linked above, but here's another resource for installation that might be helpful. Code vs. Markdown \u00b6 Jupyter notebooks are broken down into \"cells\" which might contain either code or markdown. If you select a cell with your mouse, it should be highlighted with a green border indicating that you are in \"edit,\" mode and can edit the contents of the cell. If text reading In [ ]: is on the left hand side of the cell, it's a \"code\" cell. For example, type the following and press \"Shift + Enter\" print ( \"Hello world!\" ) Pressing \"Shift + Enter\" executes the code in the cell, prints the output below the cell, and creates a new cell below that one. In addition to code cells, you can also write your own markdown cells by converting a cell using either the dropdown menu in the toolbar or pressing \"Esc + m\". In general, pressing escape enters \"command mode\" for which you can issue a number of commands, including f - find and replace m - convert to markdown y - convert to code h - open the help menu Right now, trying typing \"Esc + h\" to open the help/shortcut menu and peruse it. Spend a minute testing out some of the shortcuts. Note that markdown cells are quite flexible and can basically do anything wikipedia does, including adding $\\LaTeX$-formatted equations. $\\hat{H}\\psi = E \\psi$ Shell commands, magic, and where to learn more \u00b6 Jupyter notebooks can also issue commands to the shell, which can be achieved using the ! symbol at the beginning of the cell: ! ls . ! date In addition, certain things can be achieved in Jupyter notebooks using what are called \"magic\" commands, which are demarcated using the % sign. The most common of these are the magic function to enable inline plotting: % matplotlib inline and to invoke the debugger in a particular cell on an error: % pdb These functions set up special functionality in the notebook. Lastly, note that Jupyter notebooks are becoming increasingly popular as tools to supplement publication. As a computational researcher, you can provide explicit documentation of your methods with embedded code that actually works for a person who wants to understand better what you're working on. In my own work, I've begun making all my plots and collecting all of my data in Jupyter notebooks to provide as supporting info for each of my recent papers. It's a bit more work, but you'll find that having this level of organization and being this transparent about your methods goes a long way. There are great resources for IPython notebooks online, and here are a few of them: Jupyter website A gallery of interesting notebooks","title":"1   Introduction and Jupyter Use"},{"location":"primer/01_basic_python/1%20-%20Introduction%20and%20Jupyter%20Use/#lesson-1-introduction-to-python-and-using-jupyter-notebooks","text":"The Jupyter notebook is a platform for using and writing code in a dynamic way that allows users to combine cells of code snippets that are executed with a persistent namespace and kernel alongside markdown text for facilitating readability and visualization. In this notebook, we cover some basics of Jupyter functionality along with a discussion of some details of how you can use python in this environment and elsewhere.","title":"Lesson 1: Introduction to Python and Using Jupyter notebooks"},{"location":"primer/01_basic_python/1%20-%20Introduction%20and%20Jupyter%20Use/#installation","text":"For this workshop, we've constructed an online environment for everyone to use in order to smooth out any platform-dependent installation issues, but you'll probably want to install the tools we use today locally on your own machine. To do this, we recommend Anaconda , which is an effective tool for python package management that can create virtual environments, comes with a pre-installed IDE, and includes all of the Jupyter functionality that you'll see here. The Anaconda installer should be detailed on the page linked above, but here's another resource for installation that might be helpful.","title":"Installation"},{"location":"primer/01_basic_python/1%20-%20Introduction%20and%20Jupyter%20Use/#code-vs-markdown","text":"Jupyter notebooks are broken down into \"cells\" which might contain either code or markdown. If you select a cell with your mouse, it should be highlighted with a green border indicating that you are in \"edit,\" mode and can edit the contents of the cell. If text reading In [ ]: is on the left hand side of the cell, it's a \"code\" cell. For example, type the following and press \"Shift + Enter\" print ( \"Hello world!\" ) Pressing \"Shift + Enter\" executes the code in the cell, prints the output below the cell, and creates a new cell below that one. In addition to code cells, you can also write your own markdown cells by converting a cell using either the dropdown menu in the toolbar or pressing \"Esc + m\". In general, pressing escape enters \"command mode\" for which you can issue a number of commands, including f - find and replace m - convert to markdown y - convert to code h - open the help menu Right now, trying typing \"Esc + h\" to open the help/shortcut menu and peruse it. Spend a minute testing out some of the shortcuts. Note that markdown cells are quite flexible and can basically do anything wikipedia does, including adding $\\LaTeX$-formatted equations. $\\hat{H}\\psi = E \\psi$","title":"Code vs. Markdown"},{"location":"primer/01_basic_python/1%20-%20Introduction%20and%20Jupyter%20Use/#shell-commands-magic-and-where-to-learn-more","text":"Jupyter notebooks can also issue commands to the shell, which can be achieved using the ! symbol at the beginning of the cell: ! ls . ! date In addition, certain things can be achieved in Jupyter notebooks using what are called \"magic\" commands, which are demarcated using the % sign. The most common of these are the magic function to enable inline plotting: % matplotlib inline and to invoke the debugger in a particular cell on an error: % pdb These functions set up special functionality in the notebook. Lastly, note that Jupyter notebooks are becoming increasingly popular as tools to supplement publication. As a computational researcher, you can provide explicit documentation of your methods with embedded code that actually works for a person who wants to understand better what you're working on. In my own work, I've begun making all my plots and collecting all of my data in Jupyter notebooks to provide as supporting info for each of my recent papers. It's a bit more work, but you'll find that having this level of organization and being this transparent about your methods goes a long way. There are great resources for IPython notebooks online, and here are a few of them: Jupyter website A gallery of interesting notebooks","title":"Shell commands, magic, and where to learn more"},{"location":"primer/01_basic_python/2%20-%20Variables%20and%20built-in%20functions/","text":"(function() { function addWidgetsRenderer() { var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var scriptElement = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} scriptElement.src = widgetRendererSrc; document.body.appendChild(scriptElement); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Lesson 2: Expressions, variables and built-in functions \u00b6 Expressions \u00b6 An expression describes a computation and evaluates to a value. 2019 2000 + 19 1 * 2 * ( 3 * 4 ) A call expression is when you name the function you want to call and write down the expression you want the function to apply to. max ( 1 , 4 ) min ( - 1 , 2019 ) min ( max ( 1 , 3 ), 4 ) min ( 1 , 2 , 3 , 4 ) Variables \u00b6 * Variables are names for values. * In Python the = symbol assigns the value on the right to the name on the left. * The variable is created when a value is assigned to it. Here, Python assigns an age to a variable age and a name in quotation marks to a variable first_name. age = 27 first_name = \"Tingzheng\" last_name = \"Hou\" Unlike many other languages, Python uses a convention known as \"duck typing,\" meaning it infers the data type of a given variable from the context. Common data types include int, float, string, NoneType. You can find the type of a variable using the type function. type ( age ) To see duck typing in action, try defining age as 42.0 and inspecting the type: age = 42.0 type ( age ) In the Jupyter notebook, variable names are preserved between cells. In more formal language, the namespace of a notebook is preserved unless the kernel is reset, which resets all of the variable names. You can see this if you execute the following cells out of sequence. Try it out. Also try resetting the kernel and executing just the latter half. age = 42 age age = 29 age Built-in functions \u00b6 Now that we understand how python and jupyter handle variables, let's talk about built-in functions. We've actually already seen min , max , type . Let's try another built-in function (or one that's available by default without issuing any special instructions) called print . print ( \"Hello world!\" ) Functions are called using the function name and parentheses, which enclose the function arguments . In the previous example, print is the function, and the string \"Hello world!\" is the argument. Let's experiment with print a little: print ( \"Age is\" , age ) print ( type ( last_name )) One of the most important things you can know when learning programming is where to access help on the things you're trying to use. There are a number of ways to access information on a function. Typically, I like to use \"Shift+Tab,\" which brings up a small box with function information, which can be expanded by pressing tab again. help ( print ) print ? Exercise: What is the usage of bin ? \u00b6 bin ( 10 ) Exercise (Optional): What will you see with the print(print(10)) ? Why? \u00b6 print ( print ( 10 )) Importing other modules and functions \u00b6 Here's a list of built-in functions , but we often need functionality that's not included in this set. To get a function that's not included in our namespace by default, we use the import statement. In this example, we're going to import a module called math that contains a number of functions that can be accessed by using math.FUNCTION_NAME_HERE . import math print ( \"Exponent of 2:\" , math . exp ( 2 )) print ( \"Sine of 3.1415:\" , math . sin ( 3.1415 )) Note that we can also import functions from modules like so: from operator import add , mul from math import log , factorial add ( 1 , 2018 ) print ( factorial ( 4 )) Venturing outside the standard library \u00b6 The Standard library includes a number of modules that come pre-installed with the python programming language itself, which is summarized in this documentation . Python's real power, however, comes in how extensible it is. Python has an ecosystem of external libraries that can be managed using tools like the aforementioned Anaconda and pip. We've installed everything you need for this workshop, but if you want to install an external library on your own machine, you can issue a command like conda install pandas at the command line to automatically install and link a compatable version of the pandas dataframe management library to your current environment. Three of the most common external libraries in python are: numpy - for efficient numerical array manipulation and operation scipy - for a number of tools related to scientific computing matplotlib - for plotting data and creating figures import numpy as np from matplotlib import pyplot inflammation = np . loadtxt ( \"inflammation-04.csv\" , delimiter = ',' ) % matplotlib inline average = np . average ( inflammation , axis = 0 ) pyplot . plot ( average ) You can even observe crystal structures in line.","title":"2   Variables and built in functions"},{"location":"primer/01_basic_python/2%20-%20Variables%20and%20built-in%20functions/#lesson-2-expressions-variables-and-built-in-functions","text":"","title":"Lesson 2: Expressions, variables and built-in functions"},{"location":"primer/01_basic_python/2%20-%20Variables%20and%20built-in%20functions/#expressions","text":"An expression describes a computation and evaluates to a value. 2019 2000 + 19 1 * 2 * ( 3 * 4 ) A call expression is when you name the function you want to call and write down the expression you want the function to apply to. max ( 1 , 4 ) min ( - 1 , 2019 ) min ( max ( 1 , 3 ), 4 ) min ( 1 , 2 , 3 , 4 )","title":"Expressions"},{"location":"primer/01_basic_python/2%20-%20Variables%20and%20built-in%20functions/#variables","text":"* Variables are names for values. * In Python the = symbol assigns the value on the right to the name on the left. * The variable is created when a value is assigned to it. Here, Python assigns an age to a variable age and a name in quotation marks to a variable first_name. age = 27 first_name = \"Tingzheng\" last_name = \"Hou\" Unlike many other languages, Python uses a convention known as \"duck typing,\" meaning it infers the data type of a given variable from the context. Common data types include int, float, string, NoneType. You can find the type of a variable using the type function. type ( age ) To see duck typing in action, try defining age as 42.0 and inspecting the type: age = 42.0 type ( age ) In the Jupyter notebook, variable names are preserved between cells. In more formal language, the namespace of a notebook is preserved unless the kernel is reset, which resets all of the variable names. You can see this if you execute the following cells out of sequence. Try it out. Also try resetting the kernel and executing just the latter half. age = 42 age age = 29 age","title":"Variables"},{"location":"primer/01_basic_python/2%20-%20Variables%20and%20built-in%20functions/#built-in-functions","text":"Now that we understand how python and jupyter handle variables, let's talk about built-in functions. We've actually already seen min , max , type . Let's try another built-in function (or one that's available by default without issuing any special instructions) called print . print ( \"Hello world!\" ) Functions are called using the function name and parentheses, which enclose the function arguments . In the previous example, print is the function, and the string \"Hello world!\" is the argument. Let's experiment with print a little: print ( \"Age is\" , age ) print ( type ( last_name )) One of the most important things you can know when learning programming is where to access help on the things you're trying to use. There are a number of ways to access information on a function. Typically, I like to use \"Shift+Tab,\" which brings up a small box with function information, which can be expanded by pressing tab again. help ( print ) print ?","title":"Built-in functions"},{"location":"primer/01_basic_python/2%20-%20Variables%20and%20built-in%20functions/#exercise-what-is-the-usage-of-bin","text":"bin ( 10 )","title":"Exercise: What is the usage of bin?"},{"location":"primer/01_basic_python/2%20-%20Variables%20and%20built-in%20functions/#exercise-optional-what-will-you-see-with-the-printprint10-why","text":"print ( print ( 10 ))","title":"Exercise (Optional): What will you see with the  print(print(10))? Why?"},{"location":"primer/01_basic_python/2%20-%20Variables%20and%20built-in%20functions/#importing-other-modules-and-functions","text":"Here's a list of built-in functions , but we often need functionality that's not included in this set. To get a function that's not included in our namespace by default, we use the import statement. In this example, we're going to import a module called math that contains a number of functions that can be accessed by using math.FUNCTION_NAME_HERE . import math print ( \"Exponent of 2:\" , math . exp ( 2 )) print ( \"Sine of 3.1415:\" , math . sin ( 3.1415 )) Note that we can also import functions from modules like so: from operator import add , mul from math import log , factorial add ( 1 , 2018 ) print ( factorial ( 4 ))","title":"Importing other modules and functions"},{"location":"primer/01_basic_python/2%20-%20Variables%20and%20built-in%20functions/#venturing-outside-the-standard-library","text":"The Standard library includes a number of modules that come pre-installed with the python programming language itself, which is summarized in this documentation . Python's real power, however, comes in how extensible it is. Python has an ecosystem of external libraries that can be managed using tools like the aforementioned Anaconda and pip. We've installed everything you need for this workshop, but if you want to install an external library on your own machine, you can issue a command like conda install pandas at the command line to automatically install and link a compatable version of the pandas dataframe management library to your current environment. Three of the most common external libraries in python are: numpy - for efficient numerical array manipulation and operation scipy - for a number of tools related to scientific computing matplotlib - for plotting data and creating figures import numpy as np from matplotlib import pyplot inflammation = np . loadtxt ( \"inflammation-04.csv\" , delimiter = ',' ) % matplotlib inline average = np . average ( inflammation , axis = 0 ) pyplot . plot ( average ) You can even observe crystal structures in line.","title":"Venturing outside the standard library"},{"location":"primer/01_basic_python/3%20-%20Lists/","text":"(function() { function addWidgetsRenderer() { var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var scriptElement = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} scriptElement.src = widgetRendererSrc; document.body.appendChild(scriptElement); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Lesson 3: Lists \u00b6 Teaching: 15min Exercises: 5min A list stores many values in a single structure. \u00b6 Doing calculations with a hundred variables called pressure_001 , pressure_002 , etc., would be at least as slow as doing them by hand. Use a list to store many values together. Contained within square brackets [...] . Values separated by commas , . Use len to find out how many values are in a list. pressures = [ 0.273 , 0.275 , 0.277 , 0.275 , 0.276 ] print ( 'pressures:' , pressures ) print ( 'length:' , len ( pressures )) Use an item's index to fetch it from a list \u00b6 just like strings print ( 'zeroth item of pressures:' , pressures [ 0 ]) print ( 'fourth item of pressures:' , pressures [ 4 ]) print ( 'fourth item of \"pressures\":' , \"pressures\" [ 4 ]) Say your name ... Lists' values can be replaced by assigning to them \u00b6 Use an index expression on the left of assignment to replace a value. pressures [ 0 ] = 0.265 print ( 'pressures is now:' , pressures ) Appending items to a list lengthens it \u00b6 use list_name.append to add items to the end of a list. primes = [ 2 , 3 , 5 ] print ( 'primes is initially:' , primes ) primes . append ( 7 ) primes . append ( 9 ) print ( 'primes has become:' , primes ) * append is a method of lists * like a function, but tied to a particular object Use object_name.method_name to call methods deliberately resembles the way we refer to things in a library We will meet other methods of lists as we go along Use help(list) for a preview extend is similar to append , but it allows you to combine two lists. teen_primes = [ 11 , 13 , 17 , 19 ] older_primes = [ 23 , 31 , 47 , 59 ] print ( 'primes is currently:' , primes ) primes . extend ( teen_primes ) print ( 'primes has now become:' , primes ) primes . append ( older_primes ) print ( 'primes has finally become:' , primes ) Note that while extend maintains the \"flat\" structure of the list, appending a list to a list makes the result two-dimensional. Use del to remove items from a list entirely \u00b6 del list_name[index] removes an item from a list and shortens the list. Not a function or method, but a statement in the language. print ( 'primes before removing last item:' , primes ) del primes [ 4 ] print ( 'primes after removing last item:' , primes ) The empty list contains no values \u00b6 [] is \"the zero of lists\" Helpful as a starting point for collecting values Lists may be heterogeneous \u00b6 goals = [ 1 , 'Create lists.' , 2 , 'Extract items from lists.' , 3 , 'Modify lists.' ] * Not always a good idea... Character strings are immutable \u00b6 Cannot change the characters in a string after it has been created. Python considers the string to be a single value with parts, not a collection of values. import traceback element = 'helium' try : element [ 0 ] = 'C' except TypeError : print ( traceback . format_exc ()) Index and slice to get information out of a string/list \u00b6 Locations are numbered from 0 rather than 1 Negative indices count backward from the end of the string Slices include the lower bound but exclude the upper bound, so (upper - lower) is the slice's length print ( 'first character:' , element [ 0 ]) print ( 'last character:' , element [ - 1 ]) print ( 'middle:' , element [ 2 : 5 ]) Indexing beyond the end of a collection is an error try : print ( '99th element of element is:' , element [ 99 ]) except IndexError : print ( traceback . format_exc ()) Use the built-in function len to find the length of a string \u00b6 print ( len ( 'helium' )) Exercise: Slicing \u00b6 What does the following print: element = 'carbon' print ( 'element[1:3] is:' , element [ 1 : 3 ]) What does thing[low:high] do? What does thing[low:] do? What does thing[:high] do? What does thing[:] do? What about thing[::2] ? thing[::-1] ? Exercise: Fill in the blanks \u00b6 Fill in the blanks so that the program below produces the output shown. values = ____ values . ____ ( 1 ) values . ____ ( 3 ) values . ____ ( 5 ) print ( 'first time:' , values ) values = values [ ____ ] print ( 'second time:' , values ) \u00b6 first time: [1, 3, 5] second time: [3, 5] Exercise: From strings to lists and back \u00b6 Given this: print ( 'string to list:' , list ( 'tin' )) print ( 'list to string:' , '' . join ([ 'g' , 'o' , 'l' , 'd' ])) \u00b6 ['t', 'i', 'n'] 'gold' Explain in simple terms what list('some string') does. What does '-'.join(['x', 'y']) generate? Exercise: Sort and Sorted \u00b6 What do these two programs print? In simple terms, explain the difference between sorted(letters) and letters.sort() . # Program A letters = list ( 'gold' ) result = sorted ( letters ) print ( 'letters is' , letters , 'and result is' , result ) \u00b6 # Program B letters = list ( 'gold' ) result = letters . sort () print ( 'letters is' , letters , 'and result is' , result ) Exercise: Copying (or Not) \u00b6 What do these two programs print? In simple terms, explain the difference between new = old and new = old[:] . # Program A old = list ( 'gold' ) new = old # simple assignment new [ 0 ] = 'D' print ( 'new is' , new , 'and old is' , old ) \u00b6 # Program B old = list ( 'gold' ) new = old [:] # assigning a slice new [ 0 ] = 'D' print ( 'new is' , new , 'and old is' , old )","title":"3   Lists"},{"location":"primer/01_basic_python/3%20-%20Lists/#lesson-3-lists","text":"Teaching: 15min Exercises: 5min","title":"Lesson 3: Lists"},{"location":"primer/01_basic_python/3%20-%20Lists/#a-list-stores-many-values-in-a-single-structure","text":"Doing calculations with a hundred variables called pressure_001 , pressure_002 , etc., would be at least as slow as doing them by hand. Use a list to store many values together. Contained within square brackets [...] . Values separated by commas , . Use len to find out how many values are in a list. pressures = [ 0.273 , 0.275 , 0.277 , 0.275 , 0.276 ] print ( 'pressures:' , pressures ) print ( 'length:' , len ( pressures ))","title":"A list stores many values in a single structure."},{"location":"primer/01_basic_python/3%20-%20Lists/#use-an-items-index-to-fetch-it-from-a-list","text":"just like strings print ( 'zeroth item of pressures:' , pressures [ 0 ]) print ( 'fourth item of pressures:' , pressures [ 4 ]) print ( 'fourth item of \"pressures\":' , \"pressures\" [ 4 ]) Say your name ...","title":"Use an item's index to fetch it from a list"},{"location":"primer/01_basic_python/3%20-%20Lists/#lists-values-can-be-replaced-by-assigning-to-them","text":"Use an index expression on the left of assignment to replace a value. pressures [ 0 ] = 0.265 print ( 'pressures is now:' , pressures )","title":"Lists' values can be replaced by assigning to them"},{"location":"primer/01_basic_python/3%20-%20Lists/#appending-items-to-a-list-lengthens-it","text":"use list_name.append to add items to the end of a list. primes = [ 2 , 3 , 5 ] print ( 'primes is initially:' , primes ) primes . append ( 7 ) primes . append ( 9 ) print ( 'primes has become:' , primes ) * append is a method of lists * like a function, but tied to a particular object Use object_name.method_name to call methods deliberately resembles the way we refer to things in a library We will meet other methods of lists as we go along Use help(list) for a preview extend is similar to append , but it allows you to combine two lists. teen_primes = [ 11 , 13 , 17 , 19 ] older_primes = [ 23 , 31 , 47 , 59 ] print ( 'primes is currently:' , primes ) primes . extend ( teen_primes ) print ( 'primes has now become:' , primes ) primes . append ( older_primes ) print ( 'primes has finally become:' , primes ) Note that while extend maintains the \"flat\" structure of the list, appending a list to a list makes the result two-dimensional.","title":"Appending items to a list lengthens it"},{"location":"primer/01_basic_python/3%20-%20Lists/#use-del-to-remove-items-from-a-list-entirely","text":"del list_name[index] removes an item from a list and shortens the list. Not a function or method, but a statement in the language. print ( 'primes before removing last item:' , primes ) del primes [ 4 ] print ( 'primes after removing last item:' , primes )","title":"Use del to remove items from a list entirely"},{"location":"primer/01_basic_python/3%20-%20Lists/#the-empty-list-contains-no-values","text":"[] is \"the zero of lists\" Helpful as a starting point for collecting values","title":"The empty list contains no values"},{"location":"primer/01_basic_python/3%20-%20Lists/#lists-may-be-heterogeneous","text":"goals = [ 1 , 'Create lists.' , 2 , 'Extract items from lists.' , 3 , 'Modify lists.' ] * Not always a good idea...","title":"Lists may be heterogeneous"},{"location":"primer/01_basic_python/3%20-%20Lists/#character-strings-are-immutable","text":"Cannot change the characters in a string after it has been created. Python considers the string to be a single value with parts, not a collection of values. import traceback element = 'helium' try : element [ 0 ] = 'C' except TypeError : print ( traceback . format_exc ())","title":"Character strings are immutable"},{"location":"primer/01_basic_python/3%20-%20Lists/#index-and-slice-to-get-information-out-of-a-stringlist","text":"Locations are numbered from 0 rather than 1 Negative indices count backward from the end of the string Slices include the lower bound but exclude the upper bound, so (upper - lower) is the slice's length print ( 'first character:' , element [ 0 ]) print ( 'last character:' , element [ - 1 ]) print ( 'middle:' , element [ 2 : 5 ]) Indexing beyond the end of a collection is an error try : print ( '99th element of element is:' , element [ 99 ]) except IndexError : print ( traceback . format_exc ())","title":"Index and slice to get information out of a string/list"},{"location":"primer/01_basic_python/3%20-%20Lists/#use-the-built-in-function-len-to-find-the-length-of-a-string","text":"print ( len ( 'helium' ))","title":"Use the built-in function len to find the length of a string"},{"location":"primer/01_basic_python/3%20-%20Lists/#exercise-slicing","text":"What does the following print: element = 'carbon' print ( 'element[1:3] is:' , element [ 1 : 3 ]) What does thing[low:high] do? What does thing[low:] do? What does thing[:high] do? What does thing[:] do? What about thing[::2] ? thing[::-1] ?","title":"Exercise: Slicing"},{"location":"primer/01_basic_python/3%20-%20Lists/#exercise-fill-in-the-blanks","text":"Fill in the blanks so that the program below produces the output shown.","title":"Exercise: Fill in the blanks"},{"location":"primer/01_basic_python/3%20-%20Lists/#values-____-values____1-values____3-values____5-printfirst-time-values-values-values____-printsecond-time-values","text":"first time: [1, 3, 5] second time: [3, 5]","title":"values = ____\nvalues.____(1)\nvalues.____(3)\nvalues.____(5)\nprint(&#39;first time:&#39;, values)\nvalues = values[____]\nprint(&#39;second time:&#39;, values)\n"},{"location":"primer/01_basic_python/3%20-%20Lists/#exercise-from-strings-to-lists-and-back","text":"Given this:","title":"Exercise: From strings to lists and back"},{"location":"primer/01_basic_python/3%20-%20Lists/#printstring-to-list-listtin-printlist-to-string-joing-o-l-d","text":"['t', 'i', 'n'] 'gold' Explain in simple terms what list('some string') does. What does '-'.join(['x', 'y']) generate?","title":"print(&#39;string to list:&#39;, list(&#39;tin&#39;))\nprint(&#39;list to string:&#39;, &#39;&#39;.join([&#39;g&#39;, &#39;o&#39;, &#39;l&#39;, &#39;d&#39;]))\n"},{"location":"primer/01_basic_python/3%20-%20Lists/#exercise-sort-and-sorted","text":"What do these two programs print? In simple terms, explain the difference between sorted(letters) and letters.sort() .","title":"Exercise: Sort and Sorted"},{"location":"primer/01_basic_python/3%20-%20Lists/#program-a-letters-listgold-result-sortedletters-printletters-is-letters-and-result-is-result","text":"# Program B letters = list ( 'gold' ) result = letters . sort () print ( 'letters is' , letters , 'and result is' , result )","title":"# Program A\nletters = list(&#39;gold&#39;)\nresult = sorted(letters)\nprint(&#39;letters is&#39;, letters, &#39;and result is&#39;, result)\n"},{"location":"primer/01_basic_python/3%20-%20Lists/#exercise-copying-or-not","text":"What do these two programs print? In simple terms, explain the difference between new = old and new = old[:] .","title":"Exercise: Copying (or Not)"},{"location":"primer/01_basic_python/3%20-%20Lists/#program-a-old-listgold-new-old-simple-assignment-new0-d-printnew-is-new-and-old-is-old","text":"# Program B old = list ( 'gold' ) new = old [:] # assigning a slice new [ 0 ] = 'D' print ( 'new is' , new , 'and old is' , old )","title":"# Program A\nold = list(&#39;gold&#39;)\nnew = old      # simple assignment\nnew[0] = &#39;D&#39;\nprint(&#39;new is&#39;, new, &#39;and old is&#39;, old)\n"},{"location":"primer/01_basic_python/4%20-%20For%20loops/","text":"(function() { function addWidgetsRenderer() { var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var scriptElement = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} scriptElement.src = widgetRendererSrc; document.body.appendChild(scriptElement); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Lesson 4: For loops \u00b6 A for loop can be used to repeat actions over a set of values. name = [ 'J' , 'i' , 'm' , 'm' , 'y' ] for letter in name : print ( letter ) name = 'Jimmy' for letter in name : print ( letter ) For loops are constructed via the syntax for LOOP_VARIABLE in ITERABLE. The loop variable in the above example I've used is letter and the iterable I've used is the string name , which was defined as 'Jimmy' . Other iterables include lists and dictionary keys, which we'll discuss later. You can construct an iterable corresponding to a set of numbers beginning at 0 and ending at a certain number by using the built-in range function: for number in range ( 6 ): print ( number ) for number in range ( 2 , 10 ): if number % 2 == 0 : print ( number , \"is even\" ) my_sum = 0 for number in range ( 6 ): my_sum += number print ( \"Sum of numbers from 0 to 5 is\" , my_sum ) for n , letter in enumerate ( name ): print ( \"Letter\" , n , \"-\" , letter ) Iterables have a length, and you can find this length using the len function. print ( \"Length of\" , name , \"is\" , len ( name )) for letter1 , letter2 in zip ( \"Jimmy\" , \"Heath\" ): print ( letter1 , letter2 ) Exercise: write a for loop that computes the sum of all of the squares from 2 to 11. \u00b6 s = 0 for i in range ( 10 ): s += pow ( i + 2 , 2 ) print ( s ) Exercise (optional): Write a Python program to construct the following pattern, using a nested for loop. \u00b6 * * * * * * * * * * * * * * * * * * * * * * * * * n = 5 ; for i in range ( n ): for j in range ( i ): print ( '* ' , end = \"\" ) print ( '' ) for i in range ( n , 0 , - 1 ): for j in range ( i ): print ( '* ' , end = \"\" ) print ( '' )","title":"4   For loops"},{"location":"primer/01_basic_python/4%20-%20For%20loops/#lesson-4-for-loops","text":"A for loop can be used to repeat actions over a set of values. name = [ 'J' , 'i' , 'm' , 'm' , 'y' ] for letter in name : print ( letter ) name = 'Jimmy' for letter in name : print ( letter ) For loops are constructed via the syntax for LOOP_VARIABLE in ITERABLE. The loop variable in the above example I've used is letter and the iterable I've used is the string name , which was defined as 'Jimmy' . Other iterables include lists and dictionary keys, which we'll discuss later. You can construct an iterable corresponding to a set of numbers beginning at 0 and ending at a certain number by using the built-in range function: for number in range ( 6 ): print ( number ) for number in range ( 2 , 10 ): if number % 2 == 0 : print ( number , \"is even\" ) my_sum = 0 for number in range ( 6 ): my_sum += number print ( \"Sum of numbers from 0 to 5 is\" , my_sum ) for n , letter in enumerate ( name ): print ( \"Letter\" , n , \"-\" , letter ) Iterables have a length, and you can find this length using the len function. print ( \"Length of\" , name , \"is\" , len ( name )) for letter1 , letter2 in zip ( \"Jimmy\" , \"Heath\" ): print ( letter1 , letter2 )","title":"Lesson 4: For loops"},{"location":"primer/01_basic_python/4%20-%20For%20loops/#exercise-write-a-for-loop-that-computes-the-sum-of-all-of-the-squares-from-2-to-11","text":"s = 0 for i in range ( 10 ): s += pow ( i + 2 , 2 ) print ( s )","title":"Exercise: write a for loop that computes the sum of all of the squares from 2 to 11."},{"location":"primer/01_basic_python/4%20-%20For%20loops/#exercise-optional-write-a-python-program-to-construct-the-following-pattern-using-a-nested-for-loop","text":"* * * * * * * * * * * * * * * * * * * * * * * * * n = 5 ; for i in range ( n ): for j in range ( i ): print ( '* ' , end = \"\" ) print ( '' ) for i in range ( n , 0 , - 1 ): for j in range ( i ): print ( '* ' , end = \"\" ) print ( '' )","title":"Exercise (optional): Write a Python program to construct the following pattern, using a nested for loop."}]}