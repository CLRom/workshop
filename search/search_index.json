{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Materials Project Workshop 2020 (July 28 - 30) \u00b6 The Materials Project Workshop is two-day interactive workshop to learn to use th Materials Project (MP) open-source tools. Topics will include basic structure manipulation, querying data from MP using the API, automating DFT calculations, exploring new chemical systems and machine learning. A optional one-day python and MongoDB primer is provided for anyone new to python programming and using databases. We'll also provide a virtual poster-session for anyone interested in networking with other participants. Registration \u00b6 Registration is currently closed. Location \u00b6 The 2020 Materials Project Workshop will be fully virtual due to COVID related travel and congregation restrictions. We'll use a cloud-based python environment to enable interactive tutorials where we provide close support. Primer (optional) \u00b6 All times are in Pacific Daylight Time. Tuesday Morning -- Python/Jupyter Primer \u00b6 09:00-09:20 Intro - Logistics 09:20-10:20 Basics - Variables, Lists, Loops 10:20-10:40 Break 10:40-11:40 Control: Conditions, Funtions, Sets/Dictionaries 11:40-12:00 Open Discussion 12:00-13:00 Lunch Tuesday Afternoon -- MongoDB using Python primer \u00b6 13:00-13:20 Data Modeling - Python Types to JSON to MongoDB 13:20-14:00 Listing, Counting, Finding, and Dot Notation 14:00-14:20 Break 14:20-15:20 Advanced Filtering, Basic Aggregation, and Indexing 15:20-15:40 Open Discussion 15:40-16:00 Wrap-Up Main Workshop \u00b6 All times are in Pacific Daylight Time. Wednesday Morning \u00b6 09:00-09:20 Overview of the Materials Project 09:20-10:20 Using the Website Effectively 10:20-10:40 Break 10:40-11:40 Pymatgen Foundations 11:40-12:00 Open Discussion 12:00-13:00 Lunch Wednesday Afternoon \u00b6 13:00-14:00 Working with Surfaces in Pymatgen 14:00-14:20 Break 14:20-15:20 Using the Materials API 15:20-15:40 Open Discussion 15:40-16:00 Wrap-up Thursday Morning \u00b6 09:00-09:20 Intro 09:20-10:20 Automating DFT 10:20-10:40 Break 10:40-11:40 Exploring New Systems with Pymatgen 11:40-12:00 Open Discussion 12:00-13:00 Lunch Thursday Afternoon \u00b6 13:00-14:00 MPContribs : Share You Data via MPContribs 14:00-14:20 Break 14:20-15:40 Machine Learning with Matminer 15:40-16:00 Wrap-Up Still have questions? \u00b6 If you have any further questions, you can find some more helpful info and confact information here","title":"Home"},{"location":"#materials-project-workshop-2020-july-28-30","text":"The Materials Project Workshop is two-day interactive workshop to learn to use th Materials Project (MP) open-source tools. Topics will include basic structure manipulation, querying data from MP using the API, automating DFT calculations, exploring new chemical systems and machine learning. A optional one-day python and MongoDB primer is provided for anyone new to python programming and using databases. We'll also provide a virtual poster-session for anyone interested in networking with other participants.","title":"Materials Project Workshop 2020 (July 28 - 30)"},{"location":"#registration","text":"Registration is currently closed.","title":"Registration"},{"location":"#location","text":"The 2020 Materials Project Workshop will be fully virtual due to COVID related travel and congregation restrictions. We'll use a cloud-based python environment to enable interactive tutorials where we provide close support.","title":"Location"},{"location":"#primer-optional","text":"All times are in Pacific Daylight Time.","title":"Primer (optional)"},{"location":"#tuesday-morning-pythonjupyter-primer","text":"09:00-09:20 Intro - Logistics 09:20-10:20 Basics - Variables, Lists, Loops 10:20-10:40 Break 10:40-11:40 Control: Conditions, Funtions, Sets/Dictionaries 11:40-12:00 Open Discussion 12:00-13:00 Lunch","title":"Tuesday Morning -- Python/Jupyter Primer"},{"location":"#tuesday-afternoon-mongodb-using-python-primer","text":"13:00-13:20 Data Modeling - Python Types to JSON to MongoDB 13:20-14:00 Listing, Counting, Finding, and Dot Notation 14:00-14:20 Break 14:20-15:20 Advanced Filtering, Basic Aggregation, and Indexing 15:20-15:40 Open Discussion 15:40-16:00 Wrap-Up","title":"Tuesday Afternoon -- MongoDB using Python primer"},{"location":"#main-workshop","text":"All times are in Pacific Daylight Time.","title":"Main Workshop"},{"location":"#wednesday-morning","text":"09:00-09:20 Overview of the Materials Project 09:20-10:20 Using the Website Effectively 10:20-10:40 Break 10:40-11:40 Pymatgen Foundations 11:40-12:00 Open Discussion 12:00-13:00 Lunch","title":"Wednesday Morning"},{"location":"#wednesday-afternoon","text":"13:00-14:00 Working with Surfaces in Pymatgen 14:00-14:20 Break 14:20-15:20 Using the Materials API 15:20-15:40 Open Discussion 15:40-16:00 Wrap-up","title":"Wednesday Afternoon"},{"location":"#thursday-morning","text":"09:00-09:20 Intro 09:20-10:20 Automating DFT 10:20-10:40 Break 10:40-11:40 Exploring New Systems with Pymatgen 11:40-12:00 Open Discussion 12:00-13:00 Lunch","title":"Thursday Morning"},{"location":"#thursday-afternoon","text":"13:00-14:00 MPContribs : Share You Data via MPContribs 14:00-14:20 Break 14:20-15:40 Machine Learning with Matminer 15:40-16:00 Wrap-Up","title":"Thursday Afternoon"},{"location":"#still-have-questions","text":"If you have any further questions, you can find some more helpful info and confact information here","title":"Still have questions?"},{"location":"logistics/logistics/","text":"Logistics \u00b6 Before the Workshop \u00b6 Virtual Poster-Session \u00b6 We'll host a virtual poster-session via a YouTube video for lightning summaries and a FigShare repository with associated DOI for citation. Please email : your poster PDF a 1-minute lighting video explaining the main concept behind your poster. This shouldn't be detailed summary of your work, but rather a high-level description that everyone can listen to and then decide which posters they want to focus on such as an elevator-pitch. We'll host the lightning-videos on our YouTube Channel and publish the PDFs on FigShare with a DOI that everyone can cite for this poster session. Setup Instructions: \u00b6 Sign in to your MP account online. Register for an account first if needed. Sign in to an account on CoCalc using the same email address you registered with. This will be the online python service we'll use to work interactively. Finding your API Key: \u00b6 An important aspect of the Materials Project API is the use of API keys to ensure we can control the amount of traffic that comes to the API. Otherwise, it's very easy for someone to take down the MP servers, making them unavailable for anyone. Your API key can be accessed via the Dashboard: Login to your Materials Project account and find the dashboard in the top right hand corner Your API is displayed in the middle under the Generate API Key button. Keep this to yourself. You can reset your API key at any time. Finding your MPContribs API Key: \u00b6 Currently the API key for MPContribs is separate from Materials Project. In order to get your MPContribs API key. Login to portal.mpcontribs.org Hover over the More drop-down in the top right hand corner Click the API Key button to copy your API key to your clipboard. You can now paste this into your notebook during the MPContribs lesson. During the Workshop \u00b6 Start of the Day Instructions \u00b6 Sign in to CoCalc Sign in to the Zoom Link Sign in to the MP Workshop slack Lesson Format \u00b6 The lessons will be taught in 20-minute sessions as 10-minutes of lesson followed by 10-minutes of a hands-on exercise. You're welcome to follow along with the already filled in hand-out notebook or by typing in to an empty notebook as we go along in the lesson. If you need help \u00b6 Click the chat icon at the top right corner your CoCalc browser window. Type in a message in the new chat window followed by Shift + Enter to send the message and our helpers will be notified. If you have a General Question \u00b6 Feel free to ask a question in the MP Workshop Slack #workshop2020 channel","title":"Logistics"},{"location":"logistics/logistics/#logistics","text":"","title":"Logistics"},{"location":"logistics/logistics/#before-the-workshop","text":"","title":"Before the Workshop"},{"location":"logistics/logistics/#virtual-poster-session","text":"We'll host a virtual poster-session via a YouTube video for lightning summaries and a FigShare repository with associated DOI for citation. Please email : your poster PDF a 1-minute lighting video explaining the main concept behind your poster. This shouldn't be detailed summary of your work, but rather a high-level description that everyone can listen to and then decide which posters they want to focus on such as an elevator-pitch. We'll host the lightning-videos on our YouTube Channel and publish the PDFs on FigShare with a DOI that everyone can cite for this poster session.","title":"Virtual Poster-Session"},{"location":"logistics/logistics/#setup-instructions","text":"Sign in to your MP account online. Register for an account first if needed. Sign in to an account on CoCalc using the same email address you registered with. This will be the online python service we'll use to work interactively.","title":"Setup Instructions:"},{"location":"logistics/logistics/#finding-your-api-key","text":"An important aspect of the Materials Project API is the use of API keys to ensure we can control the amount of traffic that comes to the API. Otherwise, it's very easy for someone to take down the MP servers, making them unavailable for anyone. Your API key can be accessed via the Dashboard: Login to your Materials Project account and find the dashboard in the top right hand corner Your API is displayed in the middle under the Generate API Key button. Keep this to yourself. You can reset your API key at any time.","title":"Finding your API Key:"},{"location":"logistics/logistics/#finding-your-mpcontribs-api-key","text":"Currently the API key for MPContribs is separate from Materials Project. In order to get your MPContribs API key. Login to portal.mpcontribs.org Hover over the More drop-down in the top right hand corner Click the API Key button to copy your API key to your clipboard. You can now paste this into your notebook during the MPContribs lesson.","title":"Finding your MPContribs API Key:"},{"location":"logistics/logistics/#during-the-workshop","text":"","title":"During the Workshop"},{"location":"logistics/logistics/#start-of-the-day-instructions","text":"Sign in to CoCalc Sign in to the Zoom Link Sign in to the MP Workshop slack","title":"Start of the Day Instructions"},{"location":"logistics/logistics/#lesson-format","text":"The lessons will be taught in 20-minute sessions as 10-minutes of lesson followed by 10-minutes of a hands-on exercise. You're welcome to follow along with the already filled in hand-out notebook or by typing in to an empty notebook as we go along in the lesson.","title":"Lesson Format"},{"location":"logistics/logistics/#if-you-need-help","text":"Click the chat icon at the top right corner your CoCalc browser window. Type in a message in the new chat window followed by Shift + Enter to send the message and our helpers will be notified.","title":"If you need help"},{"location":"logistics/logistics/#if-you-have-a-general-question","text":"Feel free to ask a question in the MP Workshop Slack #workshop2020 channel","title":"If you have a General Question"},{"location":"people/people/","text":"People \u00b6 The annual MP Workshop would not be possible without all the people that contribute. In particular, several critical people step up each year to plan, organize, develop lessons, run the workshop, teach, collect post-workshop surveys, and begin planning again. This page highlights those individuals who have contributed significantly to this workshop each year. 2020 \u00b6 2020 is particularly important as the transition from an in-person 40-person workshop to an online 100-person workshop represents a significant effort. The workshop lesson plan changes a little bit each year, but these individuals stepped up and reworked the lessons for a virtual teaching environment. This represents 100's, if not well over 1000+ combined hours of effort. Organizers \u00b6 Shyam Dwaraknath Matthew Horton Patrick Huck Alice Muller Kristin Persson Instructors \u00b6 Ryan Kingbury Guy Moore Jason Munro Sam Blau Evan Spotte-Smith Oxana Andriuc John Dagdelen Rachel Woods-Robinson Alex Ganose Helpers \u00b6 Mingjian Wen Jianli Cheng Ann Rutt Hetal Patel Kara Fong Matt McDermott Jimmy Shen Eric Sivonxay","title":"People"},{"location":"people/people/#people","text":"The annual MP Workshop would not be possible without all the people that contribute. In particular, several critical people step up each year to plan, organize, develop lessons, run the workshop, teach, collect post-workshop surveys, and begin planning again. This page highlights those individuals who have contributed significantly to this workshop each year.","title":"People"},{"location":"people/people/#2020","text":"2020 is particularly important as the transition from an in-person 40-person workshop to an online 100-person workshop represents a significant effort. The workshop lesson plan changes a little bit each year, but these individuals stepped up and reworked the lessons for a virtual teaching environment. This represents 100's, if not well over 1000+ combined hours of effort.","title":"2020"},{"location":"people/people/#organizers","text":"Shyam Dwaraknath Matthew Horton Patrick Huck Alice Muller Kristin Persson","title":"Organizers"},{"location":"people/people/#instructors","text":"Ryan Kingbury Guy Moore Jason Munro Sam Blau Evan Spotte-Smith Oxana Andriuc John Dagdelen Rachel Woods-Robinson Alex Ganose","title":"Instructors"},{"location":"people/people/#helpers","text":"Mingjian Wen Jianli Cheng Ann Rutt Hetal Patel Kara Fong Matt McDermott Jimmy Shen Eric Sivonxay","title":"Helpers"},{"location":"primer/01_basic_python/0%20-%20Introduction%20and%20Jupyter%20Use/","text":"(function() { function addWidgetsRenderer() { var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var scriptElement = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} scriptElement.src = widgetRendererSrc; document.body.appendChild(scriptElement); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Introduction to Python and Using Jupyter notebooks \u00b6 The Jupyter notebook is a platform for using and writing code in a dynamic way that allows users to combine cells of code snippets that are executed with a persistent namespace and kernel alongside markdown text for facilitating readability and visualization. In this notebook, we cover some basics of Jupyter functionality along with a discussion of some details of how you can use python in this environment and elsewhere. Installation \u00b6 For this workshop, we've constructed an online environment for everyone to use in order to smooth out any platform-dependent installation issues, but you'll probably want to install the tools we use today locally on your own machine. To do this, we recommend Anaconda , which is an effective tool for python package management that can create virtual environments, comes with a pre-installed IDE, and includes all of the Jupyter functionality that you'll see here. The Anaconda installer should be detailed on the page linked above, but here's another resource for installation that might be helpful. Code vs. Markdown \u00b6 Jupyter notebooks are broken down into \"cells\" which might contain either code or markdown. If you select a cell with your mouse, it should be highlighted with a green border indicating that you are in \"edit,\" mode and can edit the contents of the cell. If text reading In [ ]: is on the left hand side of the cell, it's a \"code\" cell. For example, type the following and press \"Shift + Enter\" print ( \"Hello world!\" ) Pressing \"Shift + Enter\" executes the code in the cell, prints the output below the cell, and creates a new cell below that one. In addition to code cells, you can also write your own markdown cells by converting a cell using either the dropdown menu in the toolbar or pressing \"Esc + m\". In general, pressing escape enters \"command mode\" for which you can issue a number of commands, including f - find and replace m - convert to markdown y - convert to code h - open the help menu Right now, trying typing \"Esc + h\" to open the help/shortcut menu and peruse it. Spend a minute testing out some of the shortcuts. Note that markdown cells are quite flexible and can basically do anything wikipedia does, including adding $\\LaTeX$-formatted equations. $\\hat{H}\\psi = E \\psi$ Shell commands, magic, and where to learn more \u00b6 Jupyter notebooks can also issue commands to the shell, which can be achieved using the ! symbol at the beginning of the cell: ! ls . ! date In addition, certain things can be achieved in Jupyter notebooks using what are called \"magic\" commands, which are demarcated using the % sign. The most common of these are the magic function to enable inline plotting: % matplotlib inline and to invoke the debugger in a particular cell on an error: % pdb These functions set up special functionality in the notebook. Lastly, note that Jupyter notebooks are becoming increasingly popular as tools to supplement publication. As a computational researcher, you can provide explicit documentation of your methods with embedded code that actually works for a person who wants to understand better what you're working on. In my own work, I've begun making all my plots and collecting all of my data in Jupyter notebooks to provide as supporting info for each of my recent papers. It's a bit more work, but you'll find that having this level of organization and being this transparent about your methods goes a long way. There are great resources for IPython notebooks online, and here are a few of them: Jupyter website A gallery of interesting notebooks","title":"Intro"},{"location":"primer/01_basic_python/0%20-%20Introduction%20and%20Jupyter%20Use/#introduction-to-python-and-using-jupyter-notebooks","text":"The Jupyter notebook is a platform for using and writing code in a dynamic way that allows users to combine cells of code snippets that are executed with a persistent namespace and kernel alongside markdown text for facilitating readability and visualization. In this notebook, we cover some basics of Jupyter functionality along with a discussion of some details of how you can use python in this environment and elsewhere.","title":"Introduction to Python and Using Jupyter notebooks"},{"location":"primer/01_basic_python/0%20-%20Introduction%20and%20Jupyter%20Use/#installation","text":"For this workshop, we've constructed an online environment for everyone to use in order to smooth out any platform-dependent installation issues, but you'll probably want to install the tools we use today locally on your own machine. To do this, we recommend Anaconda , which is an effective tool for python package management that can create virtual environments, comes with a pre-installed IDE, and includes all of the Jupyter functionality that you'll see here. The Anaconda installer should be detailed on the page linked above, but here's another resource for installation that might be helpful.","title":"Installation"},{"location":"primer/01_basic_python/0%20-%20Introduction%20and%20Jupyter%20Use/#code-vs-markdown","text":"Jupyter notebooks are broken down into \"cells\" which might contain either code or markdown. If you select a cell with your mouse, it should be highlighted with a green border indicating that you are in \"edit,\" mode and can edit the contents of the cell. If text reading In [ ]: is on the left hand side of the cell, it's a \"code\" cell. For example, type the following and press \"Shift + Enter\" print ( \"Hello world!\" ) Pressing \"Shift + Enter\" executes the code in the cell, prints the output below the cell, and creates a new cell below that one. In addition to code cells, you can also write your own markdown cells by converting a cell using either the dropdown menu in the toolbar or pressing \"Esc + m\". In general, pressing escape enters \"command mode\" for which you can issue a number of commands, including f - find and replace m - convert to markdown y - convert to code h - open the help menu Right now, trying typing \"Esc + h\" to open the help/shortcut menu and peruse it. Spend a minute testing out some of the shortcuts. Note that markdown cells are quite flexible and can basically do anything wikipedia does, including adding $\\LaTeX$-formatted equations. $\\hat{H}\\psi = E \\psi$","title":"Code vs. Markdown"},{"location":"primer/01_basic_python/0%20-%20Introduction%20and%20Jupyter%20Use/#shell-commands-magic-and-where-to-learn-more","text":"Jupyter notebooks can also issue commands to the shell, which can be achieved using the ! symbol at the beginning of the cell: ! ls . ! date In addition, certain things can be achieved in Jupyter notebooks using what are called \"magic\" commands, which are demarcated using the % sign. The most common of these are the magic function to enable inline plotting: % matplotlib inline and to invoke the debugger in a particular cell on an error: % pdb These functions set up special functionality in the notebook. Lastly, note that Jupyter notebooks are becoming increasingly popular as tools to supplement publication. As a computational researcher, you can provide explicit documentation of your methods with embedded code that actually works for a person who wants to understand better what you're working on. In my own work, I've begun making all my plots and collecting all of my data in Jupyter notebooks to provide as supporting info for each of my recent papers. It's a bit more work, but you'll find that having this level of organization and being this transparent about your methods goes a long way. There are great resources for IPython notebooks online, and here are a few of them: Jupyter website A gallery of interesting notebooks","title":"Shell commands, magic, and where to learn more"},{"location":"primer/01_basic_python/1%20-%20Python%20Primer/","text":"(function() { function addWidgetsRenderer() { var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var scriptElement = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} scriptElement.src = widgetRendererSrc; document.body.appendChild(scriptElement); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Basic Python \u00b6 Lesson 1: Expressions, variables and built-in functions \u00b6 Expressions \u00b6 An expression describes a computation. Python evaluates expressions and generates a value. We say that expressions \"evaluate to\" their result. 2019 Python's arithmetic operators allows you to use a Python command line or Jupyter notebook cell as a \"calculator\" 2000 + 19 2000 - 19 Multiplication is done with an asterisk * 1 * 2 * ( 3 * 4 ) Normal or \"true\" division is done with / . This operation will always return a float 10 / 2 Python has two other division operators. \"Floor\" division // , which returns the division rounded down to the lowest integer, and the modulo operator % , which returns the remainder of a division after substracting the next lowest integer. These are easier to understand by example: 10 // 6 10 % 6 6 // 2 6 % 3 To take an exponent, use two asterisks ** (NOT ^ ) 2 ** 3 Variables \u00b6 * Variables are names for values. * In Python the = symbol assigns the value on the right to the name on the left. * The variable is created when a value is assigned to it. * Every variable has a type that describes what sort of data it contains. Some of the most common types are int (integer), float (floating point number), and string (text) * Unlike many other languages, in Python you do not have to specify the type when you create a variable. Python infers the data type based on the context. This is called 'duck typing'. int variables are simply numbers. Let's assign 27 to a variable 'age'. If the variable age does not already exist, this assignment expression will create it age = 27 You can find the type of a variable using the type() function. Let's examine the type of age . type ( age ) float variables are created by adding a decimal point to a number. Let's redefine age as 27.0 and check the type age = 27.0 type ( age ) string variables contain text and are created using quotation marks. Both single and double quotation marks are OK. Let's try making age a string first_name = \"Ryan\" type ( first_name ) Note that it's possible to create a string that contains only numbers age = \"27\" type ( age ) In the Jupyter notebook, variable names are preserved between cells. In more formal language, the namespace of a notebook is preserved unless the kernel is reset, which resets all of the variable names. You can see this if you execute the following cells out of sequence. Try it out. Also try resetting the kernel and executing just the latter half. age = 42 age Assigning a new value to an existing variable will replace the value of that variable age = 29 age Built-in functions \u00b6 Now that we understand how Python and Jupyter handle variables, let's talk about built-in functions . These functions are available by default without issuing any special instructions. One such function is type , which we've already used. Functions are called using the function name and parentheses, which enclose the function arguments . In the example below, print is the function, and the string \"Hello world!\" is the argument. print ( \"Hello world!\" ) print can accept multiple arguments, separate by commas, and will combine them together to generate its output, like this: print ( \"Age is\" , age , \"years\" ) One of the most important things you can know when learning programming is where to access help on the things you're trying to use. There are a number of ways to access information on a function. Three of the easiest ways in Jupyter are Place your cursor inside the name of any function, and press SHIFT+TAB. This will open a small box with function information, which can be expanded by pressing tab again. Use the built-in help function, where the argument to help is the name of the function you want to know more about. Type the name of the function followed by ? , which will show the functions documentation or 'docstring' Finding help \u00b6 ## click your cursor inside 'print' and press SHIFT+TAB print ( \"this is cool\" ) help ( print ) print ? Importing other modules and functions \u00b6 To get a function that's not built in to Python, we use the import statement. In this example, we're going to import a module called math that contains a number of functions that can be accessed by using math.FUNCTION_NAME_HERE . print ( \"I\" , \"am\" , \"a\" , \"penguin\" ) import math math . exp ( 2 ) print ( \"Exponent of 2:\" , math . exp ( 2 )) print ( \"Sine of 3.1415:\" , math . sin ( 3.1415 )) The Standard library includes a number of modules that come pre-installed with the python programming language itself, which is summarized in this documentation . Python's real power, however, comes in how extensible it is. Python has an ecosystem of external libraries that provide special functions for many different tasks. Three of the most common external libraries in python are: numpy - for efficient numerical array manipulation and operation scipy - for a number of tools related to scientific computing matplotlib - for plotting data and creating figures Let's use some functions from numpy and matplotlib to create a plot import numpy as np from matplotlib import pyplot inflammation = np . loadtxt ( \"inflammation-01.csv\" , delimiter = ',' ) % matplotlib inline average = np . average ( inflammation , axis = 0 ) pyplot . plot ( average ) Lesson 2: Lists and Strings \u00b6 A list stores many values in a single structure. \u00b6 A list stores many values together. Contained within square brackets [...] . Values separated by commas , . Use len to find out how many values are in a list. pressures = [ 0.273 , 0.275 , 0.277 , 0.275 , 0.276 ] print ( 'pressures:' , pressures ) Use the built-in function len to find the length of a list \u00b6 len ( pressures ) Lists may be heterogeneous \u00b6 Values can have different types goals = [ 1 , 'Create lists.' , 2 , 'Extract items from lists.' , 3 , 'Modify lists.' ] Index and slice to get information out of a string/list \u00b6 Locations are numbered from 0 rather than 1 Negative indices count backward from the end of the string Slices include the lower bound but exclude the upper bound, so (upper - lower) is the slice's length numbers = [ \"one\" , \"two\" , \"three\" , \"four\" , \"five\" ] print ( 'first element:' , numbers [ 0 ]) print ( 'last element:' , numbers [ - 1 ]) print ( 'middle elemnets:' , numbers [ 2 : 5 ]) Indexing beyond the end of a collection is an error ## This code will fail print ( '99th element of numbers is:' , numbers [ 99 ]) List values can be replaced by assigning to them \u00b6 Use an index expression on the left of assignment to replace a value. We say that lists are mutable because their contents can be changed after they are created pressures [ 0 ] = 0.265 print ( 'pressures is now:' , pressures ) Appending items to a list lengthens it \u00b6 use list_name.append to add items to the end of a list. primes = [ 2 , 3 , 5 ] print ( 'primes is initially:' , primes ) primes . append ( 7 ) primes . append ( 9 ) print ( 'primes has become:' , primes ) * append is a method of lists * like a function, but tied to a particular object Use object_name.method_name to call methods deliberately resembles the way we refer to things in a library We will meet other methods of lists as we go along Use help(list) for a preview Extending a list adds another list to it \u00b6 extend is similar to append , but it allows you to combine two lists. teen_primes = [ 11 , 13 , 17 , 19 ] older_primes = [ 23 , 31 , 47 , 59 ] print ( 'primes is currently:' , primes ) primes . extend ( teen_primes ) print ( 'primes has now become:' , primes ) primes . append ( older_primes ) print ( 'primes has finally become:' , primes ) Note that while extend maintains the \"flat\" structure of the list, appending a list to a list makes the result two-dimensional. Use del to remove items from a list entirely \u00b6 del list_name[index] removes an item from a list and shortens the list. Not a function or method, but a statement in the language. print ( 'primes before removing last item:' , primes ) del primes [ 4 ] print ( 'primes after removing last item:' , primes ) The empty list contains no values \u00b6 [] is \"the zero of lists\" Helpful as a starting point for collecting values NEVER use an empty list as a default argument in a function! Strings can be sliced and indexed just like lists \u00b6 You can think of strings as lists of characters greeting = \"My name is Ryan\" print ( 'first character:' , greeting [ 0 ]) print ( 'last character:' , greeting [ - 1 ]) print ( 'middle character:' , greeting [ 2 : 5 ]) Unlike lists, strings are immutable \u00b6 Cannot change the characters in a string after it has been created. Python considers the string to be a single value with parts, not a collection of values. element = 'helium' ## This code will fail element [ 0 ] = 'C' Lesson 3: For loops \u00b6 A for loop can be used to repeat actions over a set of values. Let's print each letter in this list: name = [ 'J' , 'i' , 'm' , 'm' , 'y' ] for letter in name : print ( letter ) For loop syntax \u00b6 For loops are constructed via the syntax for LOOP_VARIABLE in ITERABLE. The loop variable in the above example I've used is letter and the iterable I've used is the list name , which was defined as '['J', 'i', 'm', 'm', 'y']' . Other iterables include strings and dictionary keys, among others. For example, we could make name a string and iterate through it in the same way we iterated through the list: name = 'Jimmy' for letter in name : print ( letter ) You can also use list indexing notation to limit iteration to a certain portion of an iterable. name = 'Jimmy' for letter in name [ 0 : 3 ]: print ( letter ) Iterables have a length, and you can find this length using the len function. print ( \"Length of\" , name , \"is\" , len ( name )) Use enumerate() to get both an index and an item \u00b6 The enumerate function assigns an index (or counter) to each value of an iterable. It returns a tuple of (counter, value) that can be useful in for loops. For example, here we assign the index to the variable n and the value of the iterable to letter : for n , letter in enumerate ( name ): print ( \"Letter\" , n , \"-\" , letter ) Use zip() to loop over two iterables simultaneously \u00b6 The zip function can be used to loop through two iterables simultaneously (like two sides of a zipper). Here, we use zip to iterate through two strings that have the same length for letter1 , letter2 in zip ( \"Jimmy\" , \"Heath\" ): print ( letter1 , letter2 ) Use range() to iterate ranges of numbers \u00b6 The range function is used to construct an iterable corresponding to a set of numbers beginning at 0 and ending at a certain number: for number in range ( 6 ): print ( number ) Logic within for loops \u00b6 range can take multiple arguments, where the first argument is interpreted as the beginning of the range. In the example below, we combine a for loop with an if statement to print only the even numbers. This makes use of the modulo % operator we covered in the Variables lesson. for number in range ( 2 , 10 ): if number % 2 == 0 : print ( number , \"is even\" ) break stops the loop \u00b6 The break statement is used to stop iterating through an iterable if some condition is met. Here, we will end our loop as soon as we encouter the number 6: for number in range ( 2 , 10 ): if number == 6 : break else : print ( number ) A common use of for loops is to keep track of a running total of numbers. In this pattern, it's important to declare the variable that you're adding to outside the scope of the for loop. The example below makes use of the \"in place addition\" += operator, which says \"add the value on the right of the operator to the value of the variable on the left\". So x += 5 means \"add 5 to the current value of variable x . Python has similar \"in place\" operators for several other operations, including -= , *= , and /= for subtraction, multiplication, and division, respectively. my_sum = 0 for number in range ( 6 ): my_sum += number print ( \"Sum of numbers from 0 to 5 is\" , my_sum )","title":"Basic Python"},{"location":"primer/01_basic_python/1%20-%20Python%20Primer/#basic-python","text":"","title":"Basic Python"},{"location":"primer/01_basic_python/1%20-%20Python%20Primer/#lesson-1-expressions-variables-and-built-in-functions","text":"","title":"Lesson 1: Expressions, variables and built-in functions"},{"location":"primer/01_basic_python/1%20-%20Python%20Primer/#expressions","text":"An expression describes a computation. Python evaluates expressions and generates a value. We say that expressions \"evaluate to\" their result. 2019 Python's arithmetic operators allows you to use a Python command line or Jupyter notebook cell as a \"calculator\" 2000 + 19 2000 - 19 Multiplication is done with an asterisk * 1 * 2 * ( 3 * 4 ) Normal or \"true\" division is done with / . This operation will always return a float 10 / 2 Python has two other division operators. \"Floor\" division // , which returns the division rounded down to the lowest integer, and the modulo operator % , which returns the remainder of a division after substracting the next lowest integer. These are easier to understand by example: 10 // 6 10 % 6 6 // 2 6 % 3 To take an exponent, use two asterisks ** (NOT ^ ) 2 ** 3","title":"Expressions"},{"location":"primer/01_basic_python/1%20-%20Python%20Primer/#variables","text":"* Variables are names for values. * In Python the = symbol assigns the value on the right to the name on the left. * The variable is created when a value is assigned to it. * Every variable has a type that describes what sort of data it contains. Some of the most common types are int (integer), float (floating point number), and string (text) * Unlike many other languages, in Python you do not have to specify the type when you create a variable. Python infers the data type based on the context. This is called 'duck typing'. int variables are simply numbers. Let's assign 27 to a variable 'age'. If the variable age does not already exist, this assignment expression will create it age = 27 You can find the type of a variable using the type() function. Let's examine the type of age . type ( age ) float variables are created by adding a decimal point to a number. Let's redefine age as 27.0 and check the type age = 27.0 type ( age ) string variables contain text and are created using quotation marks. Both single and double quotation marks are OK. Let's try making age a string first_name = \"Ryan\" type ( first_name ) Note that it's possible to create a string that contains only numbers age = \"27\" type ( age ) In the Jupyter notebook, variable names are preserved between cells. In more formal language, the namespace of a notebook is preserved unless the kernel is reset, which resets all of the variable names. You can see this if you execute the following cells out of sequence. Try it out. Also try resetting the kernel and executing just the latter half. age = 42 age Assigning a new value to an existing variable will replace the value of that variable age = 29 age","title":"Variables"},{"location":"primer/01_basic_python/1%20-%20Python%20Primer/#built-in-functions","text":"Now that we understand how Python and Jupyter handle variables, let's talk about built-in functions . These functions are available by default without issuing any special instructions. One such function is type , which we've already used. Functions are called using the function name and parentheses, which enclose the function arguments . In the example below, print is the function, and the string \"Hello world!\" is the argument. print ( \"Hello world!\" ) print can accept multiple arguments, separate by commas, and will combine them together to generate its output, like this: print ( \"Age is\" , age , \"years\" ) One of the most important things you can know when learning programming is where to access help on the things you're trying to use. There are a number of ways to access information on a function. Three of the easiest ways in Jupyter are Place your cursor inside the name of any function, and press SHIFT+TAB. This will open a small box with function information, which can be expanded by pressing tab again. Use the built-in help function, where the argument to help is the name of the function you want to know more about. Type the name of the function followed by ? , which will show the functions documentation or 'docstring'","title":"Built-in functions"},{"location":"primer/01_basic_python/1%20-%20Python%20Primer/#finding-help","text":"## click your cursor inside 'print' and press SHIFT+TAB print ( \"this is cool\" ) help ( print ) print ?","title":"Finding help"},{"location":"primer/01_basic_python/1%20-%20Python%20Primer/#importing-other-modules-and-functions","text":"To get a function that's not built in to Python, we use the import statement. In this example, we're going to import a module called math that contains a number of functions that can be accessed by using math.FUNCTION_NAME_HERE . print ( \"I\" , \"am\" , \"a\" , \"penguin\" ) import math math . exp ( 2 ) print ( \"Exponent of 2:\" , math . exp ( 2 )) print ( \"Sine of 3.1415:\" , math . sin ( 3.1415 )) The Standard library includes a number of modules that come pre-installed with the python programming language itself, which is summarized in this documentation . Python's real power, however, comes in how extensible it is. Python has an ecosystem of external libraries that provide special functions for many different tasks. Three of the most common external libraries in python are: numpy - for efficient numerical array manipulation and operation scipy - for a number of tools related to scientific computing matplotlib - for plotting data and creating figures Let's use some functions from numpy and matplotlib to create a plot import numpy as np from matplotlib import pyplot inflammation = np . loadtxt ( \"inflammation-01.csv\" , delimiter = ',' ) % matplotlib inline average = np . average ( inflammation , axis = 0 ) pyplot . plot ( average )","title":"Importing other modules and functions"},{"location":"primer/01_basic_python/1%20-%20Python%20Primer/#lesson-2-lists-and-strings","text":"","title":"Lesson 2: Lists and Strings"},{"location":"primer/01_basic_python/1%20-%20Python%20Primer/#a-list-stores-many-values-in-a-single-structure","text":"A list stores many values together. Contained within square brackets [...] . Values separated by commas , . Use len to find out how many values are in a list. pressures = [ 0.273 , 0.275 , 0.277 , 0.275 , 0.276 ] print ( 'pressures:' , pressures )","title":"A list stores many values in a single structure."},{"location":"primer/01_basic_python/1%20-%20Python%20Primer/#use-the-built-in-function-len-to-find-the-length-of-a-list","text":"len ( pressures )","title":"Use the built-in function len to find the length of a list"},{"location":"primer/01_basic_python/1%20-%20Python%20Primer/#lists-may-be-heterogeneous","text":"Values can have different types goals = [ 1 , 'Create lists.' , 2 , 'Extract items from lists.' , 3 , 'Modify lists.' ]","title":"Lists may be heterogeneous"},{"location":"primer/01_basic_python/1%20-%20Python%20Primer/#index-and-slice-to-get-information-out-of-a-stringlist","text":"Locations are numbered from 0 rather than 1 Negative indices count backward from the end of the string Slices include the lower bound but exclude the upper bound, so (upper - lower) is the slice's length numbers = [ \"one\" , \"two\" , \"three\" , \"four\" , \"five\" ] print ( 'first element:' , numbers [ 0 ]) print ( 'last element:' , numbers [ - 1 ]) print ( 'middle elemnets:' , numbers [ 2 : 5 ]) Indexing beyond the end of a collection is an error ## This code will fail print ( '99th element of numbers is:' , numbers [ 99 ])","title":"Index and slice to get information out of a string/list"},{"location":"primer/01_basic_python/1%20-%20Python%20Primer/#list-values-can-be-replaced-by-assigning-to-them","text":"Use an index expression on the left of assignment to replace a value. We say that lists are mutable because their contents can be changed after they are created pressures [ 0 ] = 0.265 print ( 'pressures is now:' , pressures )","title":"List values can be replaced by assigning to them"},{"location":"primer/01_basic_python/1%20-%20Python%20Primer/#appending-items-to-a-list-lengthens-it","text":"use list_name.append to add items to the end of a list. primes = [ 2 , 3 , 5 ] print ( 'primes is initially:' , primes ) primes . append ( 7 ) primes . append ( 9 ) print ( 'primes has become:' , primes ) * append is a method of lists * like a function, but tied to a particular object Use object_name.method_name to call methods deliberately resembles the way we refer to things in a library We will meet other methods of lists as we go along Use help(list) for a preview","title":"Appending items to a list lengthens it"},{"location":"primer/01_basic_python/1%20-%20Python%20Primer/#extending-a-list-adds-another-list-to-it","text":"extend is similar to append , but it allows you to combine two lists. teen_primes = [ 11 , 13 , 17 , 19 ] older_primes = [ 23 , 31 , 47 , 59 ] print ( 'primes is currently:' , primes ) primes . extend ( teen_primes ) print ( 'primes has now become:' , primes ) primes . append ( older_primes ) print ( 'primes has finally become:' , primes ) Note that while extend maintains the \"flat\" structure of the list, appending a list to a list makes the result two-dimensional.","title":"Extending a list adds another list to it"},{"location":"primer/01_basic_python/1%20-%20Python%20Primer/#use-del-to-remove-items-from-a-list-entirely","text":"del list_name[index] removes an item from a list and shortens the list. Not a function or method, but a statement in the language. print ( 'primes before removing last item:' , primes ) del primes [ 4 ] print ( 'primes after removing last item:' , primes )","title":"Use del to remove items from a list entirely"},{"location":"primer/01_basic_python/1%20-%20Python%20Primer/#the-empty-list-contains-no-values","text":"[] is \"the zero of lists\" Helpful as a starting point for collecting values NEVER use an empty list as a default argument in a function!","title":"The empty list contains no values"},{"location":"primer/01_basic_python/1%20-%20Python%20Primer/#strings-can-be-sliced-and-indexed-just-like-lists","text":"You can think of strings as lists of characters greeting = \"My name is Ryan\" print ( 'first character:' , greeting [ 0 ]) print ( 'last character:' , greeting [ - 1 ]) print ( 'middle character:' , greeting [ 2 : 5 ])","title":"Strings can be sliced and indexed just like lists"},{"location":"primer/01_basic_python/1%20-%20Python%20Primer/#unlike-lists-strings-are-immutable","text":"Cannot change the characters in a string after it has been created. Python considers the string to be a single value with parts, not a collection of values. element = 'helium' ## This code will fail element [ 0 ] = 'C'","title":"Unlike lists, strings are immutable"},{"location":"primer/01_basic_python/1%20-%20Python%20Primer/#lesson-3-for-loops","text":"A for loop can be used to repeat actions over a set of values. Let's print each letter in this list: name = [ 'J' , 'i' , 'm' , 'm' , 'y' ] for letter in name : print ( letter )","title":"Lesson 3: For loops"},{"location":"primer/01_basic_python/1%20-%20Python%20Primer/#for-loop-syntax","text":"For loops are constructed via the syntax for LOOP_VARIABLE in ITERABLE. The loop variable in the above example I've used is letter and the iterable I've used is the list name , which was defined as '['J', 'i', 'm', 'm', 'y']' . Other iterables include strings and dictionary keys, among others. For example, we could make name a string and iterate through it in the same way we iterated through the list: name = 'Jimmy' for letter in name : print ( letter ) You can also use list indexing notation to limit iteration to a certain portion of an iterable. name = 'Jimmy' for letter in name [ 0 : 3 ]: print ( letter ) Iterables have a length, and you can find this length using the len function. print ( \"Length of\" , name , \"is\" , len ( name ))","title":"For loop syntax"},{"location":"primer/01_basic_python/1%20-%20Python%20Primer/#use-enumerate-to-get-both-an-index-and-an-item","text":"The enumerate function assigns an index (or counter) to each value of an iterable. It returns a tuple of (counter, value) that can be useful in for loops. For example, here we assign the index to the variable n and the value of the iterable to letter : for n , letter in enumerate ( name ): print ( \"Letter\" , n , \"-\" , letter )","title":"Use enumerate() to get both an index and an item"},{"location":"primer/01_basic_python/1%20-%20Python%20Primer/#use-zip-to-loop-over-two-iterables-simultaneously","text":"The zip function can be used to loop through two iterables simultaneously (like two sides of a zipper). Here, we use zip to iterate through two strings that have the same length for letter1 , letter2 in zip ( \"Jimmy\" , \"Heath\" ): print ( letter1 , letter2 )","title":"Use zip() to loop over two iterables simultaneously"},{"location":"primer/01_basic_python/1%20-%20Python%20Primer/#use-range-to-iterate-ranges-of-numbers","text":"The range function is used to construct an iterable corresponding to a set of numbers beginning at 0 and ending at a certain number: for number in range ( 6 ): print ( number )","title":"Use range() to iterate ranges of numbers"},{"location":"primer/01_basic_python/1%20-%20Python%20Primer/#logic-within-for-loops","text":"range can take multiple arguments, where the first argument is interpreted as the beginning of the range. In the example below, we combine a for loop with an if statement to print only the even numbers. This makes use of the modulo % operator we covered in the Variables lesson. for number in range ( 2 , 10 ): if number % 2 == 0 : print ( number , \"is even\" )","title":"Logic within for loops"},{"location":"primer/01_basic_python/1%20-%20Python%20Primer/#break-stops-the-loop","text":"The break statement is used to stop iterating through an iterable if some condition is met. Here, we will end our loop as soon as we encouter the number 6: for number in range ( 2 , 10 ): if number == 6 : break else : print ( number ) A common use of for loops is to keep track of a running total of numbers. In this pattern, it's important to declare the variable that you're adding to outside the scope of the for loop. The example below makes use of the \"in place addition\" += operator, which says \"add the value on the right of the operator to the value of the variable on the left\". So x += 5 means \"add 5 to the current value of variable x . Python has similar \"in place\" operators for several other operations, including -= , *= , and /= for subtraction, multiplication, and division, respectively. my_sum = 0 for number in range ( 6 ): my_sum += number print ( \"Sum of numbers from 0 to 5 is\" , my_sum )","title":"break stops the loop"},{"location":"primer/01_basic_python/Exercise_Solutions/","text":"(function() { function addWidgetsRenderer() { var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var scriptElement = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} scriptElement.src = widgetRendererSrc; document.body.appendChild(scriptElement); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Python Primer Exercises (with Solutions) \u00b6 Lesson 1 - Variables, Expressions, and Functions \u00b6 Exercise: Types \u00b6 Consider the following code: var1 = 1 var2 = 1. var3 = \"one\" var4 = \"3.14159\" What is the type of var1 ? int What is the type of var2 ? float What is the type of var3 ? str What is the type of var4 ? str Exercise: Find the type \u00b6 Determine the type of the variable mystery using a built-in function mystery = { \"a\" : 1 , \"b\" : 2 } mystery = { \"a\" : 1 , \"b\" : 2 } type ( mystery ) Exercise: Converting types \u00b6 Given this: var2 = 1. var4 = \"1.0\" Explain in simple terms what float(var4) does. Explain in simple terms what str(var2) does. var2 = 1. var4 = \"1.0\" ## float(var4) turns var4 from a str to a float float ( var4 ) ## str(var2) turns var2 from a float to a str str ( var2 ) Exercise: Imports \u00b6 Fill in the blanks so that the two programs below run without errors. import __ print ( \"The current directory is {} \" . format ( os . getcwd ())) import ____ print ( \"The square root of 2 is {} \" . format ( math . sqrt ( 2 ))) import os print ( \"The current directory is {} \" . format ( os . getcwd ())) import math print ( \"The square root of 2 is {} \" . format ( math . sqrt ( 2 ))) Lesson 2: Lists and Strings \u00b6 Exercise: Slicing \u00b6 What does the following print: material = 'carbon' print ( 'material[1:3] is:' , material [ 1 : 3 ]) In words, explain what does material[low:high] do? (where low and high are arbitrary numbers) material = 'carbon' print ( 'material[1:3] is:' , material [ 1 : 3 ]) ## it returns a slice of element from position low to position high (starting from 0), e.g. material [ 2 : 4 ] In words, explain what does material[low:] do? (where low is an arbitrary number) ## it returns everything in element starting from position low, e.g. material [ 2 :] In words, explain what does material[:high] do? (where low is an arbitrary number) ## it returns everything in element before position high, e.g. material [: 2 ] What does material[:] do? ## it returns the entire string material [:] What about material[::2] ? material[::-1] ? ## material[::2] returns every second character of material material [:: 2 ] ## material[:-1] returns every character, in reverse order material [:: - 1 ] Exercise: Fill in the blanks \u00b6 Fill in the blanks so that the program below produces the output shown. values = ____ values . ____ ( 1 ) values . ____ ( 3 ) values . ____ ( 5 ) print ( 'first time:' , values ) values = values [ ____ ] print ( 'second time:' , values ) \u00b6 first time: [1, 3, 5] second time: [3, 5] values = [] values . append ( 1 ) values . append ( 3 ) values . append ( 5 ) print ( 'first time:' , values ) values = values [ 1 :] print ( 'second time:' , values ) Exercise: From strings to lists and back \u00b6 Given this: print ( 'string to list:' , list ( 'tin' )) print ( 'list to string:' , '-' . join ([ 'g' , 'o' , 'l' , 'd' ])) \u00b6 ['t', 'i', 'n'] 'g-o-l-d' Explain in simple terms what list('some string') does. ## list('some string') returns a list, where each element of the list is one character of the string (including spaces), e.g. list ( 'some string' ) 2. What does ' <=> '.join(['x', 'y']) generate? ## '.'.join(list) returns the string of every element in a list, separated by the str that precedes 'join' ' <=> ' . join ([ 'x' , 'y' , 'z' ]) Exercise: Sort and Sorted \u00b6 What do these two programs print? In simple terms, explain the difference between sorted(letters) and letters.sort() . ## Program A letters = list ( 'gold' ) result = sorted ( letters ) print ( 'letters is' , letters , 'and result is' , result ) \u00b6 ## Program B letters = list ( 'gold' ) result = letters . sort () print ( 'letters is' , letters , 'and result is' , result ) sorted(letters) returns a new list containing the elements of letters sorted alphebetically ## Program A letters = list ( 'gold' ) result = sorted ( letters ) print ( 'letters is' , letters , 'and result is' , result ) letters.sort() sorts letters alphabetically and doesn't return anyting ( result is None ) ## Program B letters = list ( 'gold' ) result = letters . sort () print ( 'letters is' , letters , 'and result is' , result ) Exercise: Copying (or Not) \u00b6 What do these two programs print? In simple terms, explain the difference between new = old and new = old[:] . ## Program A old = list ( 'gold' ) new = old # simple assignment new [ 0 ] = 'D' print ( 'new is' , new , 'and old is' , old ) \u00b6 ## Program B old = list ( 'gold' ) new = old [:] # assigning a slice new [ 0 ] = 'D' print ( 'new is' , new , 'and old is' , old ) Because list is a mutable type, assignment of a list to another variable creates a reference from new to old in memory. Therefore, modifying new also modifies old old = list ( 'gold' ) new = old # simple assignment new [ 0 ] = 'D' print ( 'new is' , new , 'and old is' , old ) On the other hand, a slice of a list is immutable , so assigning a slice of old to new creates a copy that can be modified independently of old old = list ( 'gold' ) new = old [:] # assigning a slice new [ 0 ] = 'D' print ( 'new is' , new , 'and old is' , old ) Lesson 3: For loops \u00b6 Exercise: write a for loop that computes the sum of all of the squares from 2 to 11. \u00b6 s = 0 for i in range ( 10 ): s += pow ( i + 2 , 2 ) print ( s ) Exercise: write a for loop that prints each item in the list friends , but stops when it encounters the third value \u00b6 friends = [\"Rachel\", \"Monica\", \"Chandler\", \"Ross\", \"Joey\"] friends = [ \"Rachel\" , \"Monica\" , \"Chandler\" , \"Ross\" , \"Joey\" ] for i , friend in enumerate ( friends ): if i == 3 : break else : print ( friend ) Exercise: Explain in a few words what happens when you call zip on two iterables that have different lengths \u00b6 zip will stop when it reaches the end of the shorter iterable s1 = 'Jim' s2 = 'Spock' for a , b in zip ( s1 , s2 ): print ( a , b ) Exercise (bonus): Write a Python program to construct the following pattern, using a nested for loop. \u00b6 * * * * * * * * * * * * * * * * * * * * * * * * * Hint: by default the print function inserts a newline character at the end of every line it prints. To suppress this, set the end argument to \"\", like print(\"something\", end=\"\") Hint: you can iterate through a range of numbers in reverse order by passing a negative number as a third argument to range , e.g. range(0,10,-1) n = 5 for i in range ( n ): # rows for j in range ( i ): # columns print ( '* ' , end = \"\" ) print ( '' ) for i in range ( n , 0 , - 1 ): for j in range ( i ): print ( '* ' , end = \"\" ) print ( '' )","title":"Exercise Solutions"},{"location":"primer/01_basic_python/Exercise_Solutions/#python-primer-exercises-with-solutions","text":"","title":"Python Primer Exercises (with Solutions)"},{"location":"primer/01_basic_python/Exercise_Solutions/#lesson-1-variables-expressions-and-functions","text":"","title":"Lesson 1 - Variables, Expressions, and Functions"},{"location":"primer/01_basic_python/Exercise_Solutions/#exercise-types","text":"Consider the following code: var1 = 1 var2 = 1. var3 = \"one\" var4 = \"3.14159\" What is the type of var1 ? int What is the type of var2 ? float What is the type of var3 ? str What is the type of var4 ? str","title":"Exercise: Types"},{"location":"primer/01_basic_python/Exercise_Solutions/#exercise-find-the-type","text":"Determine the type of the variable mystery using a built-in function mystery = { \"a\" : 1 , \"b\" : 2 } mystery = { \"a\" : 1 , \"b\" : 2 } type ( mystery )","title":"Exercise: Find the type"},{"location":"primer/01_basic_python/Exercise_Solutions/#exercise-converting-types","text":"Given this: var2 = 1. var4 = \"1.0\" Explain in simple terms what float(var4) does. Explain in simple terms what str(var2) does. var2 = 1. var4 = \"1.0\" ## float(var4) turns var4 from a str to a float float ( var4 ) ## str(var2) turns var2 from a float to a str str ( var2 )","title":"Exercise: Converting types"},{"location":"primer/01_basic_python/Exercise_Solutions/#exercise-imports","text":"Fill in the blanks so that the two programs below run without errors. import __ print ( \"The current directory is {} \" . format ( os . getcwd ())) import ____ print ( \"The square root of 2 is {} \" . format ( math . sqrt ( 2 ))) import os print ( \"The current directory is {} \" . format ( os . getcwd ())) import math print ( \"The square root of 2 is {} \" . format ( math . sqrt ( 2 )))","title":"Exercise: Imports"},{"location":"primer/01_basic_python/Exercise_Solutions/#lesson-2-lists-and-strings","text":"","title":"Lesson 2: Lists and Strings"},{"location":"primer/01_basic_python/Exercise_Solutions/#exercise-slicing","text":"What does the following print: material = 'carbon' print ( 'material[1:3] is:' , material [ 1 : 3 ]) In words, explain what does material[low:high] do? (where low and high are arbitrary numbers) material = 'carbon' print ( 'material[1:3] is:' , material [ 1 : 3 ]) ## it returns a slice of element from position low to position high (starting from 0), e.g. material [ 2 : 4 ] In words, explain what does material[low:] do? (where low is an arbitrary number) ## it returns everything in element starting from position low, e.g. material [ 2 :] In words, explain what does material[:high] do? (where low is an arbitrary number) ## it returns everything in element before position high, e.g. material [: 2 ] What does material[:] do? ## it returns the entire string material [:] What about material[::2] ? material[::-1] ? ## material[::2] returns every second character of material material [:: 2 ] ## material[:-1] returns every character, in reverse order material [:: - 1 ]","title":"Exercise: Slicing"},{"location":"primer/01_basic_python/Exercise_Solutions/#exercise-fill-in-the-blanks","text":"Fill in the blanks so that the program below produces the output shown.","title":"Exercise: Fill in the blanks"},{"location":"primer/01_basic_python/Exercise_Solutions/#values-____-values____1-values____3-values____5-printfirst-time-values-values-values____-printsecond-time-values","text":"first time: [1, 3, 5] second time: [3, 5] values = [] values . append ( 1 ) values . append ( 3 ) values . append ( 5 ) print ( 'first time:' , values ) values = values [ 1 :] print ( 'second time:' , values )","title":"values = ____\nvalues.____(1)\nvalues.____(3)\nvalues.____(5)\nprint(&#39;first time:&#39;, values)\nvalues = values[____]\nprint(&#39;second time:&#39;, values)\n"},{"location":"primer/01_basic_python/Exercise_Solutions/#exercise-from-strings-to-lists-and-back","text":"Given this:","title":"Exercise: From strings to lists and back"},{"location":"primer/01_basic_python/Exercise_Solutions/#printstring-to-list-listtin-printlist-to-string-joing-o-l-d","text":"['t', 'i', 'n'] 'g-o-l-d' Explain in simple terms what list('some string') does. ## list('some string') returns a list, where each element of the list is one character of the string (including spaces), e.g. list ( 'some string' ) 2. What does ' <=> '.join(['x', 'y']) generate? ## '.'.join(list) returns the string of every element in a list, separated by the str that precedes 'join' ' <=> ' . join ([ 'x' , 'y' , 'z' ])","title":"print(&#39;string to list:&#39;, list(&#39;tin&#39;))\nprint(&#39;list to string:&#39;, &#39;-&#39;.join([&#39;g&#39;, &#39;o&#39;, &#39;l&#39;, &#39;d&#39;]))\n"},{"location":"primer/01_basic_python/Exercise_Solutions/#exercise-sort-and-sorted","text":"What do these two programs print? In simple terms, explain the difference between sorted(letters) and letters.sort() .","title":"Exercise: Sort and Sorted"},{"location":"primer/01_basic_python/Exercise_Solutions/#program-a-letters-listgold-result-sortedletters-printletters-is-letters-and-result-is-result","text":"## Program B letters = list ( 'gold' ) result = letters . sort () print ( 'letters is' , letters , 'and result is' , result ) sorted(letters) returns a new list containing the elements of letters sorted alphebetically ## Program A letters = list ( 'gold' ) result = sorted ( letters ) print ( 'letters is' , letters , 'and result is' , result ) letters.sort() sorts letters alphabetically and doesn't return anyting ( result is None ) ## Program B letters = list ( 'gold' ) result = letters . sort () print ( 'letters is' , letters , 'and result is' , result )","title":"## Program A\nletters = list(&#39;gold&#39;)\nresult = sorted(letters)\nprint(&#39;letters is&#39;, letters, &#39;and result is&#39;, result)\n"},{"location":"primer/01_basic_python/Exercise_Solutions/#exercise-copying-or-not","text":"What do these two programs print? In simple terms, explain the difference between new = old and new = old[:] .","title":"Exercise: Copying (or Not)"},{"location":"primer/01_basic_python/Exercise_Solutions/#program-a-old-listgold-new-old-simple-assignment-new0-d-printnew-is-new-and-old-is-old","text":"## Program B old = list ( 'gold' ) new = old [:] # assigning a slice new [ 0 ] = 'D' print ( 'new is' , new , 'and old is' , old ) Because list is a mutable type, assignment of a list to another variable creates a reference from new to old in memory. Therefore, modifying new also modifies old old = list ( 'gold' ) new = old # simple assignment new [ 0 ] = 'D' print ( 'new is' , new , 'and old is' , old ) On the other hand, a slice of a list is immutable , so assigning a slice of old to new creates a copy that can be modified independently of old old = list ( 'gold' ) new = old [:] # assigning a slice new [ 0 ] = 'D' print ( 'new is' , new , 'and old is' , old )","title":"## Program A\nold = list(&#39;gold&#39;)\nnew = old      # simple assignment\nnew[0] = &#39;D&#39;\nprint(&#39;new is&#39;, new, &#39;and old is&#39;, old)\n"},{"location":"primer/01_basic_python/Exercise_Solutions/#lesson-3-for-loops","text":"","title":"Lesson 3: For loops"},{"location":"primer/01_basic_python/Exercise_Solutions/#exercise-write-a-for-loop-that-computes-the-sum-of-all-of-the-squares-from-2-to-11","text":"s = 0 for i in range ( 10 ): s += pow ( i + 2 , 2 ) print ( s )","title":"Exercise: write a for loop that computes the sum of all of the squares from 2 to 11."},{"location":"primer/01_basic_python/Exercise_Solutions/#exercise-write-a-for-loop-that-prints-each-item-in-the-list-friends-but-stops-when-it-encounters-the-third-value","text":"friends = [\"Rachel\", \"Monica\", \"Chandler\", \"Ross\", \"Joey\"] friends = [ \"Rachel\" , \"Monica\" , \"Chandler\" , \"Ross\" , \"Joey\" ] for i , friend in enumerate ( friends ): if i == 3 : break else : print ( friend )","title":"Exercise: write a for loop that prints each item in the list friends, but stops when it encounters the third value"},{"location":"primer/01_basic_python/Exercise_Solutions/#exercise-explain-in-a-few-words-what-happens-when-you-call-zip-on-two-iterables-that-have-different-lengths","text":"zip will stop when it reaches the end of the shorter iterable s1 = 'Jim' s2 = 'Spock' for a , b in zip ( s1 , s2 ): print ( a , b )","title":"Exercise: Explain in a few words what happens when you call zip on two iterables that have different lengths"},{"location":"primer/01_basic_python/Exercise_Solutions/#exercise-bonus-write-a-python-program-to-construct-the-following-pattern-using-a-nested-for-loop","text":"* * * * * * * * * * * * * * * * * * * * * * * * * Hint: by default the print function inserts a newline character at the end of every line it prints. To suppress this, set the end argument to \"\", like print(\"something\", end=\"\") Hint: you can iterate through a range of numbers in reverse order by passing a negative number as a third argument to range , e.g. range(0,10,-1) n = 5 for i in range ( n ): # rows for j in range ( i ): # columns print ( '* ' , end = \"\" ) print ( '' ) for i in range ( n , 0 , - 1 ): for j in range ( i ): print ( '* ' , end = \"\" ) print ( '' )","title":"Exercise (bonus): Write a Python program to construct the following pattern, using a nested for loop."},{"location":"primer/01_basic_python/Exercises/","text":"(function() { function addWidgetsRenderer() { var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var scriptElement = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} scriptElement.src = widgetRendererSrc; document.body.appendChild(scriptElement); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Python Primer Exercises (with Solutions) \u00b6 Lesson 1 - Variables, Expressions, and Functions \u00b6 Exercise: Types \u00b6 Consider the following code: var1 = 1 var2 = 1. var3 = \"one\" var4 = \"3.14159\" What is the type of var1 ? What is the type of var2 ? What is the type of var3 ? What is the type of var4 ? Exercise: Find the type \u00b6 Determine the type of the variable mystery using a built-in function mystery = { \"a\" : 1 , \"b\" : 2 } Exercise: Converting types \u00b6 Given this: var2 = 1. var4 = \"1.0\" Explain in simple terms what float(var4) does. Explain in simple terms what str(var2) does. Exercise: Imports \u00b6 Fill in the blanks so that the two programs below run without errors. import __ print ( \"The current directory is {} \" . format ( os . getcwd ())) import ____ print ( \"The square root of 2 is {} \" . format ( math . sqrt ( 2 ))) Lesson 2: Lists and Strings \u00b6 Exercise: Slicing \u00b6 What does the following print: material = 'carbon' print ( 'material[1:3] is:' , material [ 1 : 3 ]) In words, explain what does material[low:high] do? (where low and high are arbitrary numbers) In words, explain what does material[low:] do? (where low is an arbitrary number) In words, explain what does material[:high] do? (where low is an arbitrary number) What does material[:] do? What about material[::2] ? material[::-1] ? Exercise: Fill in the blanks \u00b6 Fill in the blanks so that the program below produces the output shown. values = ____ values . ____ ( 1 ) values . ____ ( 3 ) values . ____ ( 5 ) print ( 'first time:' , values ) values = values [ ____ ] print ( 'second time:' , values ) \u00b6 first time: [1, 3, 5] second time: [3, 5] Exercise: From strings to lists and back \u00b6 Given this: print ( 'string to list:' , list ( 'tin' )) print ( 'list to string:' , '-' . join ([ 'g' , 'o' , 'l' , 'd' ])) \u00b6 ['t', 'i', 'n'] 'g-o-l-d' Explain in simple terms what list('some string') does. 2. What does ' <=> '.join(['x', 'y']) generate? Exercise: Sort and Sorted \u00b6 What do these two programs print? In simple terms, explain the difference between sorted(letters) and letters.sort() . ## Program A letters = list ( 'gold' ) result = sorted ( letters ) print ( 'letters is' , letters , 'and result is' , result ) \u00b6 ## Program B letters = list ( 'gold' ) result = letters . sort () print ( 'letters is' , letters , 'and result is' , result ) Exercise: Copying (or Not) \u00b6 What do these two programs print? In simple terms, explain the difference between new = old and new = old[:] . ## Program A old = list ( 'gold' ) new = old # simple assignment new [ 0 ] = 'D' print ( 'new is' , new , 'and old is' , old ) \u00b6 ## Program B old = list ( 'gold' ) new = old [:] # assigning a slice new [ 0 ] = 'D' print ( 'new is' , new , 'and old is' , old ) Lesson 3: For loops \u00b6 Exercise: write a for loop that computes the sum of all of the squares from 2 to 11. \u00b6 Exercise: write a for loop that prints each item in the list friends , but stops when it encounters the third value \u00b6 friends = [\"Rachel\", \"Monica\", \"Chandler\", \"Ross\", \"Joey\"] Exercise: Explain in a few words what happens when you call zip on two iterables that have different lengths \u00b6 zip will stop when it reaches the end of the shorter iterable Exercise (bonus): Write a Python program to construct the following pattern, using a nested for loop. \u00b6 * * * * * * * * * * * * * * * * * * * * * * * * * Hint: by default the print function inserts a newline character at the end of every line it prints. To suppress this, set the end argument to \"\", like print(\"something\", end=\"\") Hint: you can iterate through a range of numbers in reverse order by passing a negative number as a third argument to range , e.g. range(0,10,-1)","title":"Exercises"},{"location":"primer/01_basic_python/Exercises/#python-primer-exercises-with-solutions","text":"","title":"Python Primer Exercises (with Solutions)"},{"location":"primer/01_basic_python/Exercises/#lesson-1-variables-expressions-and-functions","text":"","title":"Lesson 1 - Variables, Expressions, and Functions"},{"location":"primer/01_basic_python/Exercises/#exercise-types","text":"Consider the following code: var1 = 1 var2 = 1. var3 = \"one\" var4 = \"3.14159\" What is the type of var1 ? What is the type of var2 ? What is the type of var3 ? What is the type of var4 ?","title":"Exercise: Types"},{"location":"primer/01_basic_python/Exercises/#exercise-find-the-type","text":"Determine the type of the variable mystery using a built-in function mystery = { \"a\" : 1 , \"b\" : 2 }","title":"Exercise: Find the type"},{"location":"primer/01_basic_python/Exercises/#exercise-converting-types","text":"Given this: var2 = 1. var4 = \"1.0\" Explain in simple terms what float(var4) does. Explain in simple terms what str(var2) does.","title":"Exercise: Converting types"},{"location":"primer/01_basic_python/Exercises/#exercise-imports","text":"Fill in the blanks so that the two programs below run without errors. import __ print ( \"The current directory is {} \" . format ( os . getcwd ())) import ____ print ( \"The square root of 2 is {} \" . format ( math . sqrt ( 2 )))","title":"Exercise: Imports"},{"location":"primer/01_basic_python/Exercises/#lesson-2-lists-and-strings","text":"","title":"Lesson 2: Lists and Strings"},{"location":"primer/01_basic_python/Exercises/#exercise-slicing","text":"What does the following print: material = 'carbon' print ( 'material[1:3] is:' , material [ 1 : 3 ]) In words, explain what does material[low:high] do? (where low and high are arbitrary numbers) In words, explain what does material[low:] do? (where low is an arbitrary number) In words, explain what does material[:high] do? (where low is an arbitrary number) What does material[:] do? What about material[::2] ? material[::-1] ?","title":"Exercise: Slicing"},{"location":"primer/01_basic_python/Exercises/#exercise-fill-in-the-blanks","text":"Fill in the blanks so that the program below produces the output shown.","title":"Exercise: Fill in the blanks"},{"location":"primer/01_basic_python/Exercises/#values-____-values____1-values____3-values____5-printfirst-time-values-values-values____-printsecond-time-values","text":"first time: [1, 3, 5] second time: [3, 5]","title":"values = ____\nvalues.____(1)\nvalues.____(3)\nvalues.____(5)\nprint(&#39;first time:&#39;, values)\nvalues = values[____]\nprint(&#39;second time:&#39;, values)\n"},{"location":"primer/01_basic_python/Exercises/#exercise-from-strings-to-lists-and-back","text":"Given this:","title":"Exercise: From strings to lists and back"},{"location":"primer/01_basic_python/Exercises/#printstring-to-list-listtin-printlist-to-string-joing-o-l-d","text":"['t', 'i', 'n'] 'g-o-l-d' Explain in simple terms what list('some string') does. 2. What does ' <=> '.join(['x', 'y']) generate?","title":"print(&#39;string to list:&#39;, list(&#39;tin&#39;))\nprint(&#39;list to string:&#39;, &#39;-&#39;.join([&#39;g&#39;, &#39;o&#39;, &#39;l&#39;, &#39;d&#39;]))\n"},{"location":"primer/01_basic_python/Exercises/#exercise-sort-and-sorted","text":"What do these two programs print? In simple terms, explain the difference between sorted(letters) and letters.sort() .","title":"Exercise: Sort and Sorted"},{"location":"primer/01_basic_python/Exercises/#program-a-letters-listgold-result-sortedletters-printletters-is-letters-and-result-is-result","text":"## Program B letters = list ( 'gold' ) result = letters . sort () print ( 'letters is' , letters , 'and result is' , result )","title":"## Program A\nletters = list(&#39;gold&#39;)\nresult = sorted(letters)\nprint(&#39;letters is&#39;, letters, &#39;and result is&#39;, result)\n"},{"location":"primer/01_basic_python/Exercises/#exercise-copying-or-not","text":"What do these two programs print? In simple terms, explain the difference between new = old and new = old[:] .","title":"Exercise: Copying (or Not)"},{"location":"primer/01_basic_python/Exercises/#program-a-old-listgold-new-old-simple-assignment-new0-d-printnew-is-new-and-old-is-old","text":"## Program B old = list ( 'gold' ) new = old [:] # assigning a slice new [ 0 ] = 'D' print ( 'new is' , new , 'and old is' , old )","title":"## Program A\nold = list(&#39;gold&#39;)\nnew = old      # simple assignment\nnew[0] = &#39;D&#39;\nprint(&#39;new is&#39;, new, &#39;and old is&#39;, old)\n"},{"location":"primer/01_basic_python/Exercises/#lesson-3-for-loops","text":"","title":"Lesson 3: For loops"},{"location":"primer/01_basic_python/Exercises/#exercise-write-a-for-loop-that-computes-the-sum-of-all-of-the-squares-from-2-to-11","text":"","title":"Exercise: write a for loop that computes the sum of all of the squares from 2 to 11."},{"location":"primer/01_basic_python/Exercises/#exercise-write-a-for-loop-that-prints-each-item-in-the-list-friends-but-stops-when-it-encounters-the-third-value","text":"friends = [\"Rachel\", \"Monica\", \"Chandler\", \"Ross\", \"Joey\"]","title":"Exercise: write a for loop that prints each item in the list friends, but stops when it encounters the third value"},{"location":"primer/01_basic_python/Exercises/#exercise-explain-in-a-few-words-what-happens-when-you-call-zip-on-two-iterables-that-have-different-lengths","text":"zip will stop when it reaches the end of the shorter iterable","title":"Exercise: Explain in a few words what happens when you call zip on two iterables that have different lengths"},{"location":"primer/01_basic_python/Exercises/#exercise-bonus-write-a-python-program-to-construct-the-following-pattern-using-a-nested-for-loop","text":"* * * * * * * * * * * * * * * * * * * * * * * * * Hint: by default the print function inserts a newline character at the end of every line it prints. To suppress this, set the end argument to \"\", like print(\"something\", end=\"\") Hint: you can iterate through a range of numbers in reverse order by passing a negative number as a third argument to range , e.g. range(0,10,-1)","title":"Exercise (bonus): Write a Python program to construct the following pattern, using a nested for loop."}]}